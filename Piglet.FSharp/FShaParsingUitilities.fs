
///////////////////////////////////////////////////////////////////////
//             AUTOGENERATED 2020-06-10 18:16:16.483736              //
//   All your changes to this file will be lost upon re-generation.  //
///////////////////////////////////////////////////////////////////////

namespace Piglet.Parser.Configuration.FSharp

open Piglet.Parser.Configuration.Generic
open System


/// A module containing F# code extensions for the namespace 'Piglet.Parser.Configuration.Generic'.
[<AutoOpen>]
module FSharpExtensions =
    
    /// <summary>
    /// Creates a new production rule to reduce the given symbol '<paramref name="start"/>' into a constant provided by the function '<paramref name="func"/>'.
    /// <para/>
    /// This function returns the newly created production rule. To discard the return value, either use "|> ignore" or use the function <see ref="reduce_ci"/>.
    /// </summary>
    /// <param name="start">The start symbol for this production.</param>
    /// <param name="func">The reduce function.</param>
    /// <return>The newly created production rule.</return>
    let reduce_c (start : NonTerminalWrapper<'a>) func = start.AddProduction().SetReduceFunction(Func<'a>(func))

    /// <summary>
    /// Creates a new production rule to reduce the given symbol '<paramref name="start"/>' into a constant provided by the function '<paramref name="func"/>'.
    /// <para/>
    /// This function does not returns the newly created production rule. Use the function <see ref="reduce_c"/> if you intend to reference the production rule.
    /// </summary>
    /// <param name="start">The start symbol for this production.</param>
    /// <param name="func">The reduce function.</param>
    let reduce_ci (start : NonTerminalWrapper<'a>) func = ignore <| reduce_c start func

    /// <summary>
    /// Creates a new production rule to reduce the given symbol '<paramref name="start"/>' to the given symbol '<paramref name="symbol"/>' using an identity mapping.
    /// <para/>
    /// This function returns the newly created production rule. To discard the return value, either use "|> ignore" or use the function <see ref="reduce_0i"/>.
    /// </summary>
    /// <param name="start">The start symbol for this production.</param>
    /// <param name="symbol">The reduced symbol.</param>
    /// <return>The newly created production rule.</return>
    let reduce_0 (start : NonTerminalWrapper<'a>) symbol = start.AddProduction(symbol).SetReduceToFirst()

    /// <summary>
    /// Creates a new production rule to reduce the given symbol '<paramref name="start"/>' to the given symbol '<paramref name="symbol"/>' using an identity mapping.
    /// <para/>
    /// This function does not returns the newly created production rule. Use the function <see ref="reduce_0"/> if you intend to reference the production rule.
    /// </summary>
    /// <param name="start">The start symbol for this production.</param>
    /// <param name="symbol">The reduced symbol.</param>
    /// <return>The newly created production rule.</return>
    let reduce_0i (start : NonTerminalWrapper<'a>) symbol = ignore <| reduce_0 start symbol

    /// <summary>
    /// Creates a new production rule to reduce the given symbol '<paramref name="start"/>' to the given 1 symbol(s) using the given production function.
    /// <para/>
    /// This function returns the newly created production rule. To discard the return value, either use "|> ignore" or use the function <see ref="reduce_1i"/>.
    /// </summary>
    /// <param name="start">The start symbol for this production.</param
    /// <param name="func">The reduce function.</param>
    /// <return>The newly created production rule.</return>
    let reduce_1 (start : NonTerminalWrapper<'a>) symbol1 func =
        start.AddProduction(symbol1).SetReduceFunction(Func<_, 'a>(func))


    /// <summary>
    /// Creates a new production rule to reduce the given symbol '<paramref name="start"/>' to the given 1 symbol(s) using the given production function.
    /// <para/>
    /// This function does not returns the newly created production rule. Use the function <see ref="reduce_1"/> if you intend to reference the production rule.
    /// </summary>
    /// <param name="start">The start symbol for this production.</param>
    /// <param name="func">The reduce function.</param>
    /// <return>The newly created production rule.</return>
    let reduce_1i (start : NonTerminalWrapper<'a>) symbol1 func =
        reduce_1 start symbol1 func |> ignore

    /// <summary>
    /// Creates a new production rule to reduce the given symbol '<paramref name="start"/>' to the given 2 symbol(s) using the given production function.
    /// <para/>
    /// This function returns the newly created production rule. To discard the return value, either use "|> ignore" or use the function <see ref="reduce_2i"/>.
    /// </summary>
    /// <param name="start">The start symbol for this production.</param
    /// <param name="func">The reduce function.</param>
    /// <return>The newly created production rule.</return>
    let reduce_2 (start : NonTerminalWrapper<'a>) symbol1 symbol2 func =
        start.AddProduction(symbol1, symbol2).SetReduceFunction(Func<_, _, 'a>(func))


    /// <summary>
    /// Creates a new production rule to reduce the given symbol '<paramref name="start"/>' to the given 2 symbol(s) using the given production function.
    /// <para/>
    /// This function does not returns the newly created production rule. Use the function <see ref="reduce_2"/> if you intend to reference the production rule.
    /// </summary>
    /// <param name="start">The start symbol for this production.</param>
    /// <param name="func">The reduce function.</param>
    /// <return>The newly created production rule.</return>
    let reduce_2i (start : NonTerminalWrapper<'a>) symbol1 symbol2 func =
        reduce_2 start symbol1 symbol2 func |> ignore

    /// <summary>
    /// Creates a new production rule to reduce the given symbol '<paramref name="start"/>' to the given 3 symbol(s) using the given production function.
    /// <para/>
    /// This function returns the newly created production rule. To discard the return value, either use "|> ignore" or use the function <see ref="reduce_3i"/>.
    /// </summary>
    /// <param name="start">The start symbol for this production.</param
    /// <param name="func">The reduce function.</param>
    /// <return>The newly created production rule.</return>
    let reduce_3 (start : NonTerminalWrapper<'a>) symbol1 symbol2 symbol3 func =
        start.AddProduction(symbol1, symbol2, symbol3).SetReduceFunction(Func<_, _, _, 'a>(func))


    /// <summary>
    /// Creates a new production rule to reduce the given symbol '<paramref name="start"/>' to the given 3 symbol(s) using the given production function.
    /// <para/>
    /// This function does not returns the newly created production rule. Use the function <see ref="reduce_3"/> if you intend to reference the production rule.
    /// </summary>
    /// <param name="start">The start symbol for this production.</param>
    /// <param name="func">The reduce function.</param>
    /// <return>The newly created production rule.</return>
    let reduce_3i (start : NonTerminalWrapper<'a>) symbol1 symbol2 symbol3 func =
        reduce_3 start symbol1 symbol2 symbol3 func |> ignore

    /// <summary>
    /// Creates a new production rule to reduce the given symbol '<paramref name="start"/>' to the given 4 symbol(s) using the given production function.
    /// <para/>
    /// This function returns the newly created production rule. To discard the return value, either use "|> ignore" or use the function <see ref="reduce_4i"/>.
    /// </summary>
    /// <param name="start">The start symbol for this production.</param
    /// <param name="func">The reduce function.</param>
    /// <return>The newly created production rule.</return>
    let reduce_4 (start : NonTerminalWrapper<'a>) symbol1 symbol2 symbol3 symbol4 func =
        start.AddProduction(symbol1, symbol2, symbol3, symbol4).SetReduceFunction(Func<_, _, _, _, 'a>(func))


    /// <summary>
    /// Creates a new production rule to reduce the given symbol '<paramref name="start"/>' to the given 4 symbol(s) using the given production function.
    /// <para/>
    /// This function does not returns the newly created production rule. Use the function <see ref="reduce_4"/> if you intend to reference the production rule.
    /// </summary>
    /// <param name="start">The start symbol for this production.</param>
    /// <param name="func">The reduce function.</param>
    /// <return>The newly created production rule.</return>
    let reduce_4i (start : NonTerminalWrapper<'a>) symbol1 symbol2 symbol3 symbol4 func =
        reduce_4 start symbol1 symbol2 symbol3 symbol4 func |> ignore

    /// <summary>
    /// Creates a new production rule to reduce the given symbol '<paramref name="start"/>' to the given 5 symbol(s) using the given production function.
    /// <para/>
    /// This function returns the newly created production rule. To discard the return value, either use "|> ignore" or use the function <see ref="reduce_5i"/>.
    /// </summary>
    /// <param name="start">The start symbol for this production.</param
    /// <param name="func">The reduce function.</param>
    /// <return>The newly created production rule.</return>
    let reduce_5 (start : NonTerminalWrapper<'a>) symbol1 symbol2 symbol3 symbol4 symbol5 func =
        start.AddProduction(symbol1, symbol2, symbol3, symbol4, symbol5).SetReduceFunction(Func<_, _, _, _, _, 'a>(func))


    /// <summary>
    /// Creates a new production rule to reduce the given symbol '<paramref name="start"/>' to the given 5 symbol(s) using the given production function.
    /// <para/>
    /// This function does not returns the newly created production rule. Use the function <see ref="reduce_5"/> if you intend to reference the production rule.
    /// </summary>
    /// <param name="start">The start symbol for this production.</param>
    /// <param name="func">The reduce function.</param>
    /// <return>The newly created production rule.</return>
    let reduce_5i (start : NonTerminalWrapper<'a>) symbol1 symbol2 symbol3 symbol4 symbol5 func =
        reduce_5 start symbol1 symbol2 symbol3 symbol4 symbol5 func |> ignore

    /// <summary>
    /// Creates a new production rule to reduce the given symbol '<paramref name="start"/>' to the given 6 symbol(s) using the given production function.
    /// <para/>
    /// This function returns the newly created production rule. To discard the return value, either use "|> ignore" or use the function <see ref="reduce_6i"/>.
    /// </summary>
    /// <param name="start">The start symbol for this production.</param
    /// <param name="func">The reduce function.</param>
    /// <return>The newly created production rule.</return>
    let reduce_6 (start : NonTerminalWrapper<'a>) symbol1 symbol2 symbol3 symbol4 symbol5 symbol6 func =
        start.AddProduction(symbol1, symbol2, symbol3, symbol4, symbol5, symbol6).SetReduceFunction(Func<_, _, _, _, _, _, 'a>(func))


    /// <summary>
    /// Creates a new production rule to reduce the given symbol '<paramref name="start"/>' to the given 6 symbol(s) using the given production function.
    /// <para/>
    /// This function does not returns the newly created production rule. Use the function <see ref="reduce_6"/> if you intend to reference the production rule.
    /// </summary>
    /// <param name="start">The start symbol for this production.</param>
    /// <param name="func">The reduce function.</param>
    /// <return>The newly created production rule.</return>
    let reduce_6i (start : NonTerminalWrapper<'a>) symbol1 symbol2 symbol3 symbol4 symbol5 symbol6 func =
        reduce_6 start symbol1 symbol2 symbol3 symbol4 symbol5 symbol6 func |> ignore

    /// <summary>
    /// Creates a new production rule to reduce the given symbol '<paramref name="start"/>' to the given 7 symbol(s) using the given production function.
    /// <para/>
    /// This function returns the newly created production rule. To discard the return value, either use "|> ignore" or use the function <see ref="reduce_7i"/>.
    /// </summary>
    /// <param name="start">The start symbol for this production.</param
    /// <param name="func">The reduce function.</param>
    /// <return>The newly created production rule.</return>
    let reduce_7 (start : NonTerminalWrapper<'a>) symbol1 symbol2 symbol3 symbol4 symbol5 symbol6 symbol7 func =
        start.AddProduction(symbol1, symbol2, symbol3, symbol4, symbol5, symbol6, symbol7).SetReduceFunction(Func<_, _, _, _, _, _, _, 'a>(func))


    /// <summary>
    /// Creates a new production rule to reduce the given symbol '<paramref name="start"/>' to the given 7 symbol(s) using the given production function.
    /// <para/>
    /// This function does not returns the newly created production rule. Use the function <see ref="reduce_7"/> if you intend to reference the production rule.
    /// </summary>
    /// <param name="start">The start symbol for this production.</param>
    /// <param name="func">The reduce function.</param>
    /// <return>The newly created production rule.</return>
    let reduce_7i (start : NonTerminalWrapper<'a>) symbol1 symbol2 symbol3 symbol4 symbol5 symbol6 symbol7 func =
        reduce_7 start symbol1 symbol2 symbol3 symbol4 symbol5 symbol6 symbol7 func |> ignore

    /// <summary>
    /// Creates a new production rule to reduce the given symbol '<paramref name="start"/>' to the given 8 symbol(s) using the given production function.
    /// <para/>
    /// This function returns the newly created production rule. To discard the return value, either use "|> ignore" or use the function <see ref="reduce_8i"/>.
    /// </summary>
    /// <param name="start">The start symbol for this production.</param
    /// <param name="func">The reduce function.</param>
    /// <return>The newly created production rule.</return>
    let reduce_8 (start : NonTerminalWrapper<'a>) symbol1 symbol2 symbol3 symbol4 symbol5 symbol6 symbol7 symbol8 func =
        start.AddProduction(symbol1, symbol2, symbol3, symbol4, symbol5, symbol6, symbol7, symbol8).SetReduceFunction(Func<_, _, _, _, _, _, _, _, 'a>(func))


    /// <summary>
    /// Creates a new production rule to reduce the given symbol '<paramref name="start"/>' to the given 8 symbol(s) using the given production function.
    /// <para/>
    /// This function does not returns the newly created production rule. Use the function <see ref="reduce_8"/> if you intend to reference the production rule.
    /// </summary>
    /// <param name="start">The start symbol for this production.</param>
    /// <param name="func">The reduce function.</param>
    /// <return>The newly created production rule.</return>
    let reduce_8i (start : NonTerminalWrapper<'a>) symbol1 symbol2 symbol3 symbol4 symbol5 symbol6 symbol7 symbol8 func =
        reduce_8 start symbol1 symbol2 symbol3 symbol4 symbol5 symbol6 symbol7 symbol8 func |> ignore

    /// <summary>
    /// Creates a new production rule to reduce the given symbol '<paramref name="start"/>' to the given 9 symbol(s) using the given production function.
    /// <para/>
    /// This function returns the newly created production rule. To discard the return value, either use "|> ignore" or use the function <see ref="reduce_9i"/>.
    /// </summary>
    /// <param name="start">The start symbol for this production.</param
    /// <param name="func">The reduce function.</param>
    /// <return>The newly created production rule.</return>
    let reduce_9 (start : NonTerminalWrapper<'a>) symbol1 symbol2 symbol3 symbol4 symbol5 symbol6 symbol7 symbol8 symbol9 func =
        start.AddProduction(symbol1, symbol2, symbol3, symbol4, symbol5, symbol6, symbol7, symbol8, symbol9).SetReduceFunction(Func<_, _, _, _, _, _, _, _, _, 'a>(func))


    /// <summary>
    /// Creates a new production rule to reduce the given symbol '<paramref name="start"/>' to the given 9 symbol(s) using the given production function.
    /// <para/>
    /// This function does not returns the newly created production rule. Use the function <see ref="reduce_9"/> if you intend to reference the production rule.
    /// </summary>
    /// <param name="start">The start symbol for this production.</param>
    /// <param name="func">The reduce function.</param>
    /// <return>The newly created production rule.</return>
    let reduce_9i (start : NonTerminalWrapper<'a>) symbol1 symbol2 symbol3 symbol4 symbol5 symbol6 symbol7 symbol8 symbol9 func =
        reduce_9 start symbol1 symbol2 symbol3 symbol4 symbol5 symbol6 symbol7 symbol8 symbol9 func |> ignore

    /// <summary>
    /// Creates a new production rule to reduce the given symbol '<paramref name="start"/>' to the given 10 symbol(s) using the given production function.
    /// <para/>
    /// This function returns the newly created production rule. To discard the return value, either use "|> ignore" or use the function <see ref="reduce_10i"/>.
    /// </summary>
    /// <param name="start">The start symbol for this production.</param
    /// <param name="func">The reduce function.</param>
    /// <return>The newly created production rule.</return>
    let reduce_10 (start : NonTerminalWrapper<'a>) symbol1 symbol2 symbol3 symbol4 symbol5 symbol6 symbol7 symbol8 symbol9 symbol10 func =
        start.AddProduction(symbol1, symbol2, symbol3, symbol4, symbol5, symbol6, symbol7, symbol8, symbol9, symbol10).SetReduceFunction(Func<_, _, _, _, _, _, _, _, _, _, 'a>(func))


    /// <summary>
    /// Creates a new production rule to reduce the given symbol '<paramref name="start"/>' to the given 10 symbol(s) using the given production function.
    /// <para/>
    /// This function does not returns the newly created production rule. Use the function <see ref="reduce_10"/> if you intend to reference the production rule.
    /// </summary>
    /// <param name="start">The start symbol for this production.</param>
    /// <param name="func">The reduce function.</param>
    /// <return>The newly created production rule.</return>
    let reduce_10i (start : NonTerminalWrapper<'a>) symbol1 symbol2 symbol3 symbol4 symbol5 symbol6 symbol7 symbol8 symbol9 symbol10 func =
        reduce_10 start symbol1 symbol2 symbol3 symbol4 symbol5 symbol6 symbol7 symbol8 symbol9 symbol10 func |> ignore

    /// <summary>
    /// Creates a new production rule to reduce the given symbol '<paramref name="start"/>' to the given 11 symbol(s) using the given production function.
    /// <para/>
    /// This function returns the newly created production rule. To discard the return value, either use "|> ignore" or use the function <see ref="reduce_11i"/>.
    /// </summary>
    /// <param name="start">The start symbol for this production.</param
    /// <param name="func">The reduce function.</param>
    /// <return>The newly created production rule.</return>
    let reduce_11 (start : NonTerminalWrapper<'a>) symbol1 symbol2 symbol3 symbol4 symbol5 symbol6 symbol7 symbol8 symbol9 symbol10 symbol11 func =
        start.AddProduction(symbol1, symbol2, symbol3, symbol4, symbol5, symbol6, symbol7, symbol8, symbol9, symbol10, symbol11).SetReduceFunction(Func<_, _, _, _, _, _, _, _, _, _, _, 'a>(func))


    /// <summary>
    /// Creates a new production rule to reduce the given symbol '<paramref name="start"/>' to the given 11 symbol(s) using the given production function.
    /// <para/>
    /// This function does not returns the newly created production rule. Use the function <see ref="reduce_11"/> if you intend to reference the production rule.
    /// </summary>
    /// <param name="start">The start symbol for this production.</param>
    /// <param name="func">The reduce function.</param>
    /// <return>The newly created production rule.</return>
    let reduce_11i (start : NonTerminalWrapper<'a>) symbol1 symbol2 symbol3 symbol4 symbol5 symbol6 symbol7 symbol8 symbol9 symbol10 symbol11 func =
        reduce_11 start symbol1 symbol2 symbol3 symbol4 symbol5 symbol6 symbol7 symbol8 symbol9 symbol10 symbol11 func |> ignore

    /// <summary>
    /// Creates a new production rule to reduce the given symbol '<paramref name="start"/>' to the given 12 symbol(s) using the given production function.
    /// <para/>
    /// This function returns the newly created production rule. To discard the return value, either use "|> ignore" or use the function <see ref="reduce_12i"/>.
    /// </summary>
    /// <param name="start">The start symbol for this production.</param
    /// <param name="func">The reduce function.</param>
    /// <return>The newly created production rule.</return>
    let reduce_12 (start : NonTerminalWrapper<'a>) symbol1 symbol2 symbol3 symbol4 symbol5 symbol6 symbol7 symbol8 symbol9 symbol10 symbol11 symbol12 func =
        start.AddProduction(symbol1, symbol2, symbol3, symbol4, symbol5, symbol6, symbol7, symbol8, symbol9, symbol10, symbol11, symbol12).SetReduceFunction(Func<_, _, _, _, _, _, _, _, _, _, _, _, 'a>(func))


    /// <summary>
    /// Creates a new production rule to reduce the given symbol '<paramref name="start"/>' to the given 12 symbol(s) using the given production function.
    /// <para/>
    /// This function does not returns the newly created production rule. Use the function <see ref="reduce_12"/> if you intend to reference the production rule.
    /// </summary>
    /// <param name="start">The start symbol for this production.</param>
    /// <param name="func">The reduce function.</param>
    /// <return>The newly created production rule.</return>
    let reduce_12i (start : NonTerminalWrapper<'a>) symbol1 symbol2 symbol3 symbol4 symbol5 symbol6 symbol7 symbol8 symbol9 symbol10 symbol11 symbol12 func =
        reduce_12 start symbol1 symbol2 symbol3 symbol4 symbol5 symbol6 symbol7 symbol8 symbol9 symbol10 symbol11 symbol12 func |> ignore

    /// <summary>
    /// Creates a new production rule to reduce the given symbol '<paramref name="start"/>' to the given 13 symbol(s) using the given production function.
    /// <para/>
    /// This function returns the newly created production rule. To discard the return value, either use "|> ignore" or use the function <see ref="reduce_13i"/>.
    /// </summary>
    /// <param name="start">The start symbol for this production.</param
    /// <param name="func">The reduce function.</param>
    /// <return>The newly created production rule.</return>
    let reduce_13 (start : NonTerminalWrapper<'a>) symbol1 symbol2 symbol3 symbol4 symbol5 symbol6 symbol7 symbol8 symbol9 symbol10 symbol11 symbol12 symbol13 func =
        start.AddProduction(symbol1, symbol2, symbol3, symbol4, symbol5, symbol6, symbol7, symbol8, symbol9, symbol10, symbol11, symbol12, symbol13).SetReduceFunction(Func<_, _, _, _, _, _, _, _, _, _, _, _, _, 'a>(func))


    /// <summary>
    /// Creates a new production rule to reduce the given symbol '<paramref name="start"/>' to the given 13 symbol(s) using the given production function.
    /// <para/>
    /// This function does not returns the newly created production rule. Use the function <see ref="reduce_13"/> if you intend to reference the production rule.
    /// </summary>
    /// <param name="start">The start symbol for this production.</param>
    /// <param name="func">The reduce function.</param>
    /// <return>The newly created production rule.</return>
    let reduce_13i (start : NonTerminalWrapper<'a>) symbol1 symbol2 symbol3 symbol4 symbol5 symbol6 symbol7 symbol8 symbol9 symbol10 symbol11 symbol12 symbol13 func =
        reduce_13 start symbol1 symbol2 symbol3 symbol4 symbol5 symbol6 symbol7 symbol8 symbol9 symbol10 symbol11 symbol12 symbol13 func |> ignore

    /// <summary>
    /// Creates a new production rule to reduce the given symbol '<paramref name="start"/>' to the given 14 symbol(s) using the given production function.
    /// <para/>
    /// This function returns the newly created production rule. To discard the return value, either use "|> ignore" or use the function <see ref="reduce_14i"/>.
    /// </summary>
    /// <param name="start">The start symbol for this production.</param
    /// <param name="func">The reduce function.</param>
    /// <return>The newly created production rule.</return>
    let reduce_14 (start : NonTerminalWrapper<'a>) symbol1 symbol2 symbol3 symbol4 symbol5 symbol6 symbol7 symbol8 symbol9 symbol10 symbol11 symbol12 symbol13 symbol14 func =
        start.AddProduction(symbol1, symbol2, symbol3, symbol4, symbol5, symbol6, symbol7, symbol8, symbol9, symbol10, symbol11, symbol12, symbol13, symbol14).SetReduceFunction(Func<_, _, _, _, _, _, _, _, _, _, _, _, _, _, 'a>(func))


    /// <summary>
    /// Creates a new production rule to reduce the given symbol '<paramref name="start"/>' to the given 14 symbol(s) using the given production function.
    /// <para/>
    /// This function does not returns the newly created production rule. Use the function <see ref="reduce_14"/> if you intend to reference the production rule.
    /// </summary>
    /// <param name="start">The start symbol for this production.</param>
    /// <param name="func">The reduce function.</param>
    /// <return>The newly created production rule.</return>
    let reduce_14i (start : NonTerminalWrapper<'a>) symbol1 symbol2 symbol3 symbol4 symbol5 symbol6 symbol7 symbol8 symbol9 symbol10 symbol11 symbol12 symbol13 symbol14 func =
        reduce_14 start symbol1 symbol2 symbol3 symbol4 symbol5 symbol6 symbol7 symbol8 symbol9 symbol10 symbol11 symbol12 symbol13 symbol14 func |> ignore

    /// <summary>
    /// Creates a new production rule to reduce the given symbol '<paramref name="start"/>' to the given 15 symbol(s) using the given production function.
    /// <para/>
    /// This function returns the newly created production rule. To discard the return value, either use "|> ignore" or use the function <see ref="reduce_15i"/>.
    /// </summary>
    /// <param name="start">The start symbol for this production.</param
    /// <param name="func">The reduce function.</param>
    /// <return>The newly created production rule.</return>
    let reduce_15 (start : NonTerminalWrapper<'a>) symbol1 symbol2 symbol3 symbol4 symbol5 symbol6 symbol7 symbol8 symbol9 symbol10 symbol11 symbol12 symbol13 symbol14 symbol15 func =
        start.AddProduction(symbol1, symbol2, symbol3, symbol4, symbol5, symbol6, symbol7, symbol8, symbol9, symbol10, symbol11, symbol12, symbol13, symbol14, symbol15).SetReduceFunction(Func<_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 'a>(func))


    /// <summary>
    /// Creates a new production rule to reduce the given symbol '<paramref name="start"/>' to the given 15 symbol(s) using the given production function.
    /// <para/>
    /// This function does not returns the newly created production rule. Use the function <see ref="reduce_15"/> if you intend to reference the production rule.
    /// </summary>
    /// <param name="start">The start symbol for this production.</param>
    /// <param name="func">The reduce function.</param>
    /// <return>The newly created production rule.</return>
    let reduce_15i (start : NonTerminalWrapper<'a>) symbol1 symbol2 symbol3 symbol4 symbol5 symbol6 symbol7 symbol8 symbol9 symbol10 symbol11 symbol12 symbol13 symbol14 symbol15 func =
        reduce_15 start symbol1 symbol2 symbol3 symbol4 symbol5 symbol6 symbol7 symbol8 symbol9 symbol10 symbol11 symbol12 symbol13 symbol14 symbol15 func |> ignore

    /// <summary>
    /// Creates a new production rule to reduce the given symbol '<paramref name="start"/>' to the given 16 symbol(s) using the given production function.
    /// <para/>
    /// This function returns the newly created production rule. To discard the return value, either use "|> ignore" or use the function <see ref="reduce_16i"/>.
    /// </summary>
    /// <param name="start">The start symbol for this production.</param
    /// <param name="func">The reduce function.</param>
    /// <return>The newly created production rule.</return>
    let reduce_16 (start : NonTerminalWrapper<'a>) symbol1 symbol2 symbol3 symbol4 symbol5 symbol6 symbol7 symbol8 symbol9 symbol10 symbol11 symbol12 symbol13 symbol14 symbol15 symbol16 func =
        start.AddProduction(symbol1, symbol2, symbol3, symbol4, symbol5, symbol6, symbol7, symbol8, symbol9, symbol10, symbol11, symbol12, symbol13, symbol14, symbol15, symbol16).SetReduceFunction(Func<_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 'a>(func))


    /// <summary>
    /// Creates a new production rule to reduce the given symbol '<paramref name="start"/>' to the given 16 symbol(s) using the given production function.
    /// <para/>
    /// This function does not returns the newly created production rule. Use the function <see ref="reduce_16"/> if you intend to reference the production rule.
    /// </summary>
    /// <param name="start">The start symbol for this production.</param>
    /// <param name="func">The reduce function.</param>
    /// <return>The newly created production rule.</return>
    let reduce_16i (start : NonTerminalWrapper<'a>) symbol1 symbol2 symbol3 symbol4 symbol5 symbol6 symbol7 symbol8 symbol9 symbol10 symbol11 symbol12 symbol13 symbol14 symbol15 symbol16 func =
        reduce_16 start symbol1 symbol2 symbol3 symbol4 symbol5 symbol6 symbol7 symbol8 symbol9 symbol10 symbol11 symbol12 symbol13 symbol14 symbol15 symbol16 func |> ignore
