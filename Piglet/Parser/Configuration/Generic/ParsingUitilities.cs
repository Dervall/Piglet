
///////////////////////////////////////////////////////////////////////
//             AUTOGENERATED 2020-06-11 14:20:59.457928              //
//   All your changes to this file will be lost upon re-generation.  //
///////////////////////////////////////////////////////////////////////

using System.Diagnostics.CodeAnalysis;
using System.Collections.Generic;
using System.Linq;
using System;

using Piglet.Parser.Construction;
using Piglet.Lexer.Runtime;
using Piglet.Lexer;


namespace Piglet.Parser.Configuration.Generic
{
    /// <summary>
    /// Represents an abstract generic parser constructor.
    /// <para/>
    /// The parser based on this constructor will return a parsed value of the type <typeparamref name="TOut"/>.
    /// </summary>
    /// <typeparam name="TOut">The generic value return type of the parser.</typeparam>
    public abstract class ParserConstructor<TOut>
    {
        private ParserWrapper? _parser = null;
        private volatile int _ntcounter = 0;

        /// <summary>
        /// The parser configuration.
        /// </summary>
        public IParserConfigurator<object> Configurator { get; }


        /// <summary>
        /// Creates a new generic parser constructor with the default parser configuration.
        /// </summary>
        public ParserConstructor()
            : this(ParserFactory.Configure<object>())
        {
        }

        /// <summary>
        /// Creates a new generic parser constructor with the given parser configuration.
        /// </summary>
        /// <param name="configurator">Parser configuration.</param>
        public ParserConstructor(IParserConfigurator<object> configurator) => Configurator = configurator;

        /// <summary>
        /// Creates a new non-terminal symbol with the given generic semantic value and name.
        /// </summary>
        /// <typeparam name="T">Generic semantic value stored inside the new non-terminal symbol.</typeparam>
        /// <param name="name">The name of the new non-terminal symbol.</param>
        /// <returns>The newly created non-terminal symbol.</returns>
        protected NonTerminalWrapper<T> CreateNonTerminal<T>(string name) => new NonTerminalWrapper<T>(Configurator.CreateNonTerminal(name));

        /// <summary>
        /// Creates a new non-terminal symbol with the given generic semantic value and the default name for non-terminals ("NT...").
        /// </summary>
        /// <typeparam name="T">Generic semantic value stored inside the new non-terminal symbol.</typeparam>
        /// <returns>The newly created non-terminal symbol.</returns>
        protected NonTerminalWrapper<T> CreateNonTerminal<T>() => CreateNonTerminal<T>($"NT{++_ntcounter}");

        /// <summary>
        /// Creates a new terminal symbol associated with the given regex string and generic value.
        /// </summary>
        /// <typeparam name="T">Generic semantic value stored inside the new terminal symbol.</typeparam>
        /// <param name="regex">The regex string associated with the terminal symbol.</param>
        /// <param name="value">The value stored inside the new terminal value.</param>
        /// <returns>The newly created terminal symbol.</returns>
        protected TerminalWrapper<T> CreateTerminal<T>(string regex, T value) => CreateTerminal(regex, _ => value);

        /// <summary>
        /// Creates a new terminal symbol associated with the given regex string and the function providing the generic value.
        /// </summary>
        /// <typeparam name="T">Generic semantic value stored inside the new terminal symbol.</typeparam>
        /// <param name="regex">The regex string associated with the terminal symbol.</param>
        /// <param name="func">The function providing the generic value represented by the terminal symbol.</param>
        /// <returns>The newly created terminal symbol.</returns>
        protected TerminalWrapper<T> CreateTerminal<T>(string regex, Func<string, T> func) => new TerminalWrapper<T>(Configurator.CreateTerminal(regex, s => func(s)));

        /// <summary>
        /// Creates a new terminal symbol associated with the given regex string and the identity function (of the type <see langword="string"/>).
        /// </summary>
        /// <param name="regex">The regex string associated with the terminal symbol.</param>
        /// <returns>The newly created terminal symbol.</returns>
        protected TerminalWrapper<string> CreateTerminal(string regex) => new TerminalWrapper<string>(Configurator.CreateTerminal(regex));

        /// <summary>
        /// Sets the precedence for all given symbols in ascending order. The first symbol group is therefore considered to have the lowest precedence and the last symbol group the highest precedence.
        /// </summary>
        /// <param name="groups">Ordered collection of groups containing a set of symbols with their corresponding associativity.</param>
        protected void SetPrecedenceList(params (AssociativityDirection direction, ITerminalWrapper[] symbols)[] groups)
        {
            foreach ((AssociativityDirection d, ITerminalWrapper[] s) in groups)
                SetAssociativity(d, s);
        }

        /// <summary>
        /// Sets the given associativity to all symbols in the given symbol collection. All sybols will be considered to have the same precedence group.
        /// </summary>
        /// <param name="dir">Associativity direction.</param>
        /// <param name="symbols">Target symbols.</param>
        /// <returns>The precedence group associated with the given symbols.</returns>
        protected IPrecedenceGroup SetAssociativity(AssociativityDirection dir, params ITerminalWrapper[] symbols)
        {
            ITerminal<object>[] arr = symbols.Select(s => s.Symbol).ToArray();

            switch (dir)
            {
                case AssociativityDirection.Left:
                    return Configurator.LeftAssociative(arr);
                case AssociativityDirection.Right:
                    return Configurator.RightAssociative(arr);
                default:
                    throw new ArgumentOutOfRangeException(nameof(dir));
            }
        }

        /// <summary>
        /// Creates a new production rule on the given non-terminal symbol using the given production function.
        /// <br/>
        /// This production represents the reducing of the given non-terminal to the given symbol.
        /// </summary>
        /// <typeparam name="T">The generic type of <paramref name="non_terminal"/>.</typeparam>
        /// <typeparam name="S0">The generic type of <paramref name="non_terminal"/>.</typeparam>
        /// <param name="non_terminal">The non-terminal symbol which gets reduced.</param>
        /// <param name="symbol0">The symbol, to which <paramref name="non_terminal"/> gets reduced.</param>
        protected void CreateProduction<T, S0>(NonTerminalWrapper<T> non_terminal, SymbolWrapper<S0> symbol0) => non_terminal.AddProduction(symbol0).SetReduceToFirst();

        /// <summary>
        /// Creates a new production rule on the given non-terminal symbol using the given production function.
        /// <br/>
        /// This production represents the reducing of the given non-terminal to the 0 given symbols.
        /// </summary>
        /// <param name="non_terminal">The non-terminal symbol which gets reduced.</param>
        /// <typeparam name="T">The generic type of <paramref name="non_terminal"/>.</typeparam>
        /// <param name="func">The generic production function which gets called upon reduction. The function accepts the value stored inside the produced symbols, and returns the value to be stored inside the non-terminal symbol "<paramref name="non_terminal"/>".</param>
        /// <returns>The newly created production rule.</returns>
        protected ProductionWrapper<T> CreateProduction<T>(NonTerminalWrapper<T> non_terminal, Func<T> func) => non_terminal.AddProduction().SetReduceFunction(func);

        /// <summary>
        /// Creates a new production rule on the given non-terminal symbol using the given production function.
        /// <br/>
        /// This production represents the reducing of the given non-terminal to the 1 given symbols.
        /// </summary>
        /// <param name="non_terminal">The non-terminal symbol which gets reduced.</param>
        /// <typeparam name="T">The generic type of <paramref name="non_terminal"/>.</typeparam>
        /// <typeparam name="S0">The generic type of <paramref name="symbol0"/>.</typeparam>
        /// <param name="symbol0">The symbol no. 0, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="func">The generic production function which gets called upon reduction. The function accepts the value stored inside the produced symbols, and returns the value to be stored inside the non-terminal symbol "<paramref name="non_terminal"/>".</param>
        /// <returns>The newly created production rule.</returns>
        protected ProductionWrapper<S0, T> CreateProduction<T, S0>(NonTerminalWrapper<T> non_terminal, SymbolWrapper<S0> symbol0, Func<S0, T> func) => non_terminal.AddProduction(symbol0).SetReduceFunction(func);

        /// <summary>
        /// Creates a new production rule on the given non-terminal symbol using the given production function.
        /// <br/>
        /// This production represents the reducing of the given non-terminal to the 2 given symbols.
        /// </summary>
        /// <param name="non_terminal">The non-terminal symbol which gets reduced.</param>
        /// <typeparam name="T">The generic type of <paramref name="non_terminal"/>.</typeparam>
        /// <typeparam name="S0">The generic type of <paramref name="symbol0"/>.</typeparam>
        /// <typeparam name="S1">The generic type of <paramref name="symbol1"/>.</typeparam>
        /// <param name="symbol0">The symbol no. 0, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="symbol1">The symbol no. 1, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="func">The generic production function which gets called upon reduction. The function accepts the value stored inside the produced symbols, and returns the value to be stored inside the non-terminal symbol "<paramref name="non_terminal"/>".</param>
        /// <returns>The newly created production rule.</returns>
        protected ProductionWrapper<S0, S1, T> CreateProduction<T, S0, S1>(NonTerminalWrapper<T> non_terminal, SymbolWrapper<S0> symbol0, SymbolWrapper<S1> symbol1, Func<S0, S1, T> func) => non_terminal.AddProduction(symbol0, symbol1).SetReduceFunction(func);

        /// <summary>
        /// Creates a new production rule on the given non-terminal symbol using the given production function.
        /// <br/>
        /// This production represents the reducing of the given non-terminal to the 3 given symbols.
        /// </summary>
        /// <param name="non_terminal">The non-terminal symbol which gets reduced.</param>
        /// <typeparam name="T">The generic type of <paramref name="non_terminal"/>.</typeparam>
        /// <typeparam name="S0">The generic type of <paramref name="symbol0"/>.</typeparam>
        /// <typeparam name="S1">The generic type of <paramref name="symbol1"/>.</typeparam>
        /// <typeparam name="S2">The generic type of <paramref name="symbol2"/>.</typeparam>
        /// <param name="symbol0">The symbol no. 0, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="symbol1">The symbol no. 1, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="symbol2">The symbol no. 2, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="func">The generic production function which gets called upon reduction. The function accepts the value stored inside the produced symbols, and returns the value to be stored inside the non-terminal symbol "<paramref name="non_terminal"/>".</param>
        /// <returns>The newly created production rule.</returns>
        protected ProductionWrapper<S0, S1, S2, T> CreateProduction<T, S0, S1, S2>(NonTerminalWrapper<T> non_terminal, SymbolWrapper<S0> symbol0, SymbolWrapper<S1> symbol1, SymbolWrapper<S2> symbol2, Func<S0, S1, S2, T> func) => non_terminal.AddProduction(symbol0, symbol1, symbol2).SetReduceFunction(func);

        /// <summary>
        /// Creates a new production rule on the given non-terminal symbol using the given production function.
        /// <br/>
        /// This production represents the reducing of the given non-terminal to the 4 given symbols.
        /// </summary>
        /// <param name="non_terminal">The non-terminal symbol which gets reduced.</param>
        /// <typeparam name="T">The generic type of <paramref name="non_terminal"/>.</typeparam>
        /// <typeparam name="S0">The generic type of <paramref name="symbol0"/>.</typeparam>
        /// <typeparam name="S1">The generic type of <paramref name="symbol1"/>.</typeparam>
        /// <typeparam name="S2">The generic type of <paramref name="symbol2"/>.</typeparam>
        /// <typeparam name="S3">The generic type of <paramref name="symbol3"/>.</typeparam>
        /// <param name="symbol0">The symbol no. 0, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="symbol1">The symbol no. 1, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="symbol2">The symbol no. 2, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="symbol3">The symbol no. 3, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="func">The generic production function which gets called upon reduction. The function accepts the value stored inside the produced symbols, and returns the value to be stored inside the non-terminal symbol "<paramref name="non_terminal"/>".</param>
        /// <returns>The newly created production rule.</returns>
        protected ProductionWrapper<S0, S1, S2, S3, T> CreateProduction<T, S0, S1, S2, S3>(NonTerminalWrapper<T> non_terminal, SymbolWrapper<S0> symbol0, SymbolWrapper<S1> symbol1, SymbolWrapper<S2> symbol2, SymbolWrapper<S3> symbol3, Func<S0, S1, S2, S3, T> func) => non_terminal.AddProduction(symbol0, symbol1, symbol2, symbol3).SetReduceFunction(func);

        /// <summary>
        /// Creates a new production rule on the given non-terminal symbol using the given production function.
        /// <br/>
        /// This production represents the reducing of the given non-terminal to the 5 given symbols.
        /// </summary>
        /// <param name="non_terminal">The non-terminal symbol which gets reduced.</param>
        /// <typeparam name="T">The generic type of <paramref name="non_terminal"/>.</typeparam>
        /// <typeparam name="S0">The generic type of <paramref name="symbol0"/>.</typeparam>
        /// <typeparam name="S1">The generic type of <paramref name="symbol1"/>.</typeparam>
        /// <typeparam name="S2">The generic type of <paramref name="symbol2"/>.</typeparam>
        /// <typeparam name="S3">The generic type of <paramref name="symbol3"/>.</typeparam>
        /// <typeparam name="S4">The generic type of <paramref name="symbol4"/>.</typeparam>
        /// <param name="symbol0">The symbol no. 0, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="symbol1">The symbol no. 1, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="symbol2">The symbol no. 2, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="symbol3">The symbol no. 3, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="symbol4">The symbol no. 4, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="func">The generic production function which gets called upon reduction. The function accepts the value stored inside the produced symbols, and returns the value to be stored inside the non-terminal symbol "<paramref name="non_terminal"/>".</param>
        /// <returns>The newly created production rule.</returns>
        protected ProductionWrapper<S0, S1, S2, S3, S4, T> CreateProduction<T, S0, S1, S2, S3, S4>(NonTerminalWrapper<T> non_terminal, SymbolWrapper<S0> symbol0, SymbolWrapper<S1> symbol1, SymbolWrapper<S2> symbol2, SymbolWrapper<S3> symbol3, SymbolWrapper<S4> symbol4, Func<S0, S1, S2, S3, S4, T> func) => non_terminal.AddProduction(symbol0, symbol1, symbol2, symbol3, symbol4).SetReduceFunction(func);

        /// <summary>
        /// Creates a new production rule on the given non-terminal symbol using the given production function.
        /// <br/>
        /// This production represents the reducing of the given non-terminal to the 6 given symbols.
        /// </summary>
        /// <param name="non_terminal">The non-terminal symbol which gets reduced.</param>
        /// <typeparam name="T">The generic type of <paramref name="non_terminal"/>.</typeparam>
        /// <typeparam name="S0">The generic type of <paramref name="symbol0"/>.</typeparam>
        /// <typeparam name="S1">The generic type of <paramref name="symbol1"/>.</typeparam>
        /// <typeparam name="S2">The generic type of <paramref name="symbol2"/>.</typeparam>
        /// <typeparam name="S3">The generic type of <paramref name="symbol3"/>.</typeparam>
        /// <typeparam name="S4">The generic type of <paramref name="symbol4"/>.</typeparam>
        /// <typeparam name="S5">The generic type of <paramref name="symbol5"/>.</typeparam>
        /// <param name="symbol0">The symbol no. 0, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="symbol1">The symbol no. 1, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="symbol2">The symbol no. 2, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="symbol3">The symbol no. 3, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="symbol4">The symbol no. 4, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="symbol5">The symbol no. 5, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="func">The generic production function which gets called upon reduction. The function accepts the value stored inside the produced symbols, and returns the value to be stored inside the non-terminal symbol "<paramref name="non_terminal"/>".</param>
        /// <returns>The newly created production rule.</returns>
        protected ProductionWrapper<S0, S1, S2, S3, S4, S5, T> CreateProduction<T, S0, S1, S2, S3, S4, S5>(NonTerminalWrapper<T> non_terminal, SymbolWrapper<S0> symbol0, SymbolWrapper<S1> symbol1, SymbolWrapper<S2> symbol2, SymbolWrapper<S3> symbol3, SymbolWrapper<S4> symbol4, SymbolWrapper<S5> symbol5, Func<S0, S1, S2, S3, S4, S5, T> func) => non_terminal.AddProduction(symbol0, symbol1, symbol2, symbol3, symbol4, symbol5).SetReduceFunction(func);

        /// <summary>
        /// Creates a new production rule on the given non-terminal symbol using the given production function.
        /// <br/>
        /// This production represents the reducing of the given non-terminal to the 7 given symbols.
        /// </summary>
        /// <param name="non_terminal">The non-terminal symbol which gets reduced.</param>
        /// <typeparam name="T">The generic type of <paramref name="non_terminal"/>.</typeparam>
        /// <typeparam name="S0">The generic type of <paramref name="symbol0"/>.</typeparam>
        /// <typeparam name="S1">The generic type of <paramref name="symbol1"/>.</typeparam>
        /// <typeparam name="S2">The generic type of <paramref name="symbol2"/>.</typeparam>
        /// <typeparam name="S3">The generic type of <paramref name="symbol3"/>.</typeparam>
        /// <typeparam name="S4">The generic type of <paramref name="symbol4"/>.</typeparam>
        /// <typeparam name="S5">The generic type of <paramref name="symbol5"/>.</typeparam>
        /// <typeparam name="S6">The generic type of <paramref name="symbol6"/>.</typeparam>
        /// <param name="symbol0">The symbol no. 0, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="symbol1">The symbol no. 1, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="symbol2">The symbol no. 2, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="symbol3">The symbol no. 3, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="symbol4">The symbol no. 4, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="symbol5">The symbol no. 5, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="symbol6">The symbol no. 6, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="func">The generic production function which gets called upon reduction. The function accepts the value stored inside the produced symbols, and returns the value to be stored inside the non-terminal symbol "<paramref name="non_terminal"/>".</param>
        /// <returns>The newly created production rule.</returns>
        protected ProductionWrapper<S0, S1, S2, S3, S4, S5, S6, T> CreateProduction<T, S0, S1, S2, S3, S4, S5, S6>(NonTerminalWrapper<T> non_terminal, SymbolWrapper<S0> symbol0, SymbolWrapper<S1> symbol1, SymbolWrapper<S2> symbol2, SymbolWrapper<S3> symbol3, SymbolWrapper<S4> symbol4, SymbolWrapper<S5> symbol5, SymbolWrapper<S6> symbol6, Func<S0, S1, S2, S3, S4, S5, S6, T> func) => non_terminal.AddProduction(symbol0, symbol1, symbol2, symbol3, symbol4, symbol5, symbol6).SetReduceFunction(func);

        /// <summary>
        /// Creates a new production rule on the given non-terminal symbol using the given production function.
        /// <br/>
        /// This production represents the reducing of the given non-terminal to the 8 given symbols.
        /// </summary>
        /// <param name="non_terminal">The non-terminal symbol which gets reduced.</param>
        /// <typeparam name="T">The generic type of <paramref name="non_terminal"/>.</typeparam>
        /// <typeparam name="S0">The generic type of <paramref name="symbol0"/>.</typeparam>
        /// <typeparam name="S1">The generic type of <paramref name="symbol1"/>.</typeparam>
        /// <typeparam name="S2">The generic type of <paramref name="symbol2"/>.</typeparam>
        /// <typeparam name="S3">The generic type of <paramref name="symbol3"/>.</typeparam>
        /// <typeparam name="S4">The generic type of <paramref name="symbol4"/>.</typeparam>
        /// <typeparam name="S5">The generic type of <paramref name="symbol5"/>.</typeparam>
        /// <typeparam name="S6">The generic type of <paramref name="symbol6"/>.</typeparam>
        /// <typeparam name="S7">The generic type of <paramref name="symbol7"/>.</typeparam>
        /// <param name="symbol0">The symbol no. 0, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="symbol1">The symbol no. 1, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="symbol2">The symbol no. 2, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="symbol3">The symbol no. 3, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="symbol4">The symbol no. 4, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="symbol5">The symbol no. 5, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="symbol6">The symbol no. 6, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="symbol7">The symbol no. 7, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="func">The generic production function which gets called upon reduction. The function accepts the value stored inside the produced symbols, and returns the value to be stored inside the non-terminal symbol "<paramref name="non_terminal"/>".</param>
        /// <returns>The newly created production rule.</returns>
        protected ProductionWrapper<S0, S1, S2, S3, S4, S5, S6, S7, T> CreateProduction<T, S0, S1, S2, S3, S4, S5, S6, S7>(NonTerminalWrapper<T> non_terminal, SymbolWrapper<S0> symbol0, SymbolWrapper<S1> symbol1, SymbolWrapper<S2> symbol2, SymbolWrapper<S3> symbol3, SymbolWrapper<S4> symbol4, SymbolWrapper<S5> symbol5, SymbolWrapper<S6> symbol6, SymbolWrapper<S7> symbol7, Func<S0, S1, S2, S3, S4, S5, S6, S7, T> func) => non_terminal.AddProduction(symbol0, symbol1, symbol2, symbol3, symbol4, symbol5, symbol6, symbol7).SetReduceFunction(func);

        /// <summary>
        /// Creates a new production rule on the given non-terminal symbol using the given production function.
        /// <br/>
        /// This production represents the reducing of the given non-terminal to the 9 given symbols.
        /// </summary>
        /// <param name="non_terminal">The non-terminal symbol which gets reduced.</param>
        /// <typeparam name="T">The generic type of <paramref name="non_terminal"/>.</typeparam>
        /// <typeparam name="S0">The generic type of <paramref name="symbol0"/>.</typeparam>
        /// <typeparam name="S1">The generic type of <paramref name="symbol1"/>.</typeparam>
        /// <typeparam name="S2">The generic type of <paramref name="symbol2"/>.</typeparam>
        /// <typeparam name="S3">The generic type of <paramref name="symbol3"/>.</typeparam>
        /// <typeparam name="S4">The generic type of <paramref name="symbol4"/>.</typeparam>
        /// <typeparam name="S5">The generic type of <paramref name="symbol5"/>.</typeparam>
        /// <typeparam name="S6">The generic type of <paramref name="symbol6"/>.</typeparam>
        /// <typeparam name="S7">The generic type of <paramref name="symbol7"/>.</typeparam>
        /// <typeparam name="S8">The generic type of <paramref name="symbol8"/>.</typeparam>
        /// <param name="symbol0">The symbol no. 0, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="symbol1">The symbol no. 1, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="symbol2">The symbol no. 2, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="symbol3">The symbol no. 3, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="symbol4">The symbol no. 4, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="symbol5">The symbol no. 5, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="symbol6">The symbol no. 6, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="symbol7">The symbol no. 7, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="symbol8">The symbol no. 8, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="func">The generic production function which gets called upon reduction. The function accepts the value stored inside the produced symbols, and returns the value to be stored inside the non-terminal symbol "<paramref name="non_terminal"/>".</param>
        /// <returns>The newly created production rule.</returns>
        protected ProductionWrapper<S0, S1, S2, S3, S4, S5, S6, S7, S8, T> CreateProduction<T, S0, S1, S2, S3, S4, S5, S6, S7, S8>(NonTerminalWrapper<T> non_terminal, SymbolWrapper<S0> symbol0, SymbolWrapper<S1> symbol1, SymbolWrapper<S2> symbol2, SymbolWrapper<S3> symbol3, SymbolWrapper<S4> symbol4, SymbolWrapper<S5> symbol5, SymbolWrapper<S6> symbol6, SymbolWrapper<S7> symbol7, SymbolWrapper<S8> symbol8, Func<S0, S1, S2, S3, S4, S5, S6, S7, S8, T> func) => non_terminal.AddProduction(symbol0, symbol1, symbol2, symbol3, symbol4, symbol5, symbol6, symbol7, symbol8).SetReduceFunction(func);

        /// <summary>
        /// Creates a new production rule on the given non-terminal symbol using the given production function.
        /// <br/>
        /// This production represents the reducing of the given non-terminal to the 10 given symbols.
        /// </summary>
        /// <param name="non_terminal">The non-terminal symbol which gets reduced.</param>
        /// <typeparam name="T">The generic type of <paramref name="non_terminal"/>.</typeparam>
        /// <typeparam name="S0">The generic type of <paramref name="symbol0"/>.</typeparam>
        /// <typeparam name="S1">The generic type of <paramref name="symbol1"/>.</typeparam>
        /// <typeparam name="S2">The generic type of <paramref name="symbol2"/>.</typeparam>
        /// <typeparam name="S3">The generic type of <paramref name="symbol3"/>.</typeparam>
        /// <typeparam name="S4">The generic type of <paramref name="symbol4"/>.</typeparam>
        /// <typeparam name="S5">The generic type of <paramref name="symbol5"/>.</typeparam>
        /// <typeparam name="S6">The generic type of <paramref name="symbol6"/>.</typeparam>
        /// <typeparam name="S7">The generic type of <paramref name="symbol7"/>.</typeparam>
        /// <typeparam name="S8">The generic type of <paramref name="symbol8"/>.</typeparam>
        /// <typeparam name="S9">The generic type of <paramref name="symbol9"/>.</typeparam>
        /// <param name="symbol0">The symbol no. 0, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="symbol1">The symbol no. 1, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="symbol2">The symbol no. 2, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="symbol3">The symbol no. 3, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="symbol4">The symbol no. 4, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="symbol5">The symbol no. 5, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="symbol6">The symbol no. 6, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="symbol7">The symbol no. 7, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="symbol8">The symbol no. 8, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="symbol9">The symbol no. 9, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="func">The generic production function which gets called upon reduction. The function accepts the value stored inside the produced symbols, and returns the value to be stored inside the non-terminal symbol "<paramref name="non_terminal"/>".</param>
        /// <returns>The newly created production rule.</returns>
        protected ProductionWrapper<S0, S1, S2, S3, S4, S5, S6, S7, S8, S9, T> CreateProduction<T, S0, S1, S2, S3, S4, S5, S6, S7, S8, S9>(NonTerminalWrapper<T> non_terminal, SymbolWrapper<S0> symbol0, SymbolWrapper<S1> symbol1, SymbolWrapper<S2> symbol2, SymbolWrapper<S3> symbol3, SymbolWrapper<S4> symbol4, SymbolWrapper<S5> symbol5, SymbolWrapper<S6> symbol6, SymbolWrapper<S7> symbol7, SymbolWrapper<S8> symbol8, SymbolWrapper<S9> symbol9, Func<S0, S1, S2, S3, S4, S5, S6, S7, S8, S9, T> func) => non_terminal.AddProduction(symbol0, symbol1, symbol2, symbol3, symbol4, symbol5, symbol6, symbol7, symbol8, symbol9).SetReduceFunction(func);

        /// <summary>
        /// Creates a new production rule on the given non-terminal symbol using the given production function.
        /// <br/>
        /// This production represents the reducing of the given non-terminal to the 11 given symbols.
        /// </summary>
        /// <param name="non_terminal">The non-terminal symbol which gets reduced.</param>
        /// <typeparam name="T">The generic type of <paramref name="non_terminal"/>.</typeparam>
        /// <typeparam name="S0">The generic type of <paramref name="symbol0"/>.</typeparam>
        /// <typeparam name="S1">The generic type of <paramref name="symbol1"/>.</typeparam>
        /// <typeparam name="S2">The generic type of <paramref name="symbol2"/>.</typeparam>
        /// <typeparam name="S3">The generic type of <paramref name="symbol3"/>.</typeparam>
        /// <typeparam name="S4">The generic type of <paramref name="symbol4"/>.</typeparam>
        /// <typeparam name="S5">The generic type of <paramref name="symbol5"/>.</typeparam>
        /// <typeparam name="S6">The generic type of <paramref name="symbol6"/>.</typeparam>
        /// <typeparam name="S7">The generic type of <paramref name="symbol7"/>.</typeparam>
        /// <typeparam name="S8">The generic type of <paramref name="symbol8"/>.</typeparam>
        /// <typeparam name="S9">The generic type of <paramref name="symbol9"/>.</typeparam>
        /// <typeparam name="S10">The generic type of <paramref name="symbol10"/>.</typeparam>
        /// <param name="symbol0">The symbol no. 0, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="symbol1">The symbol no. 1, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="symbol2">The symbol no. 2, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="symbol3">The symbol no. 3, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="symbol4">The symbol no. 4, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="symbol5">The symbol no. 5, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="symbol6">The symbol no. 6, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="symbol7">The symbol no. 7, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="symbol8">The symbol no. 8, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="symbol9">The symbol no. 9, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="symbol10">The symbol no. 10, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="func">The generic production function which gets called upon reduction. The function accepts the value stored inside the produced symbols, and returns the value to be stored inside the non-terminal symbol "<paramref name="non_terminal"/>".</param>
        /// <returns>The newly created production rule.</returns>
        protected ProductionWrapper<S0, S1, S2, S3, S4, S5, S6, S7, S8, S9, S10, T> CreateProduction<T, S0, S1, S2, S3, S4, S5, S6, S7, S8, S9, S10>(NonTerminalWrapper<T> non_terminal, SymbolWrapper<S0> symbol0, SymbolWrapper<S1> symbol1, SymbolWrapper<S2> symbol2, SymbolWrapper<S3> symbol3, SymbolWrapper<S4> symbol4, SymbolWrapper<S5> symbol5, SymbolWrapper<S6> symbol6, SymbolWrapper<S7> symbol7, SymbolWrapper<S8> symbol8, SymbolWrapper<S9> symbol9, SymbolWrapper<S10> symbol10, Func<S0, S1, S2, S3, S4, S5, S6, S7, S8, S9, S10, T> func) => non_terminal.AddProduction(symbol0, symbol1, symbol2, symbol3, symbol4, symbol5, symbol6, symbol7, symbol8, symbol9, symbol10).SetReduceFunction(func);

        /// <summary>
        /// Creates a new production rule on the given non-terminal symbol using the given production function.
        /// <br/>
        /// This production represents the reducing of the given non-terminal to the 12 given symbols.
        /// </summary>
        /// <param name="non_terminal">The non-terminal symbol which gets reduced.</param>
        /// <typeparam name="T">The generic type of <paramref name="non_terminal"/>.</typeparam>
        /// <typeparam name="S0">The generic type of <paramref name="symbol0"/>.</typeparam>
        /// <typeparam name="S1">The generic type of <paramref name="symbol1"/>.</typeparam>
        /// <typeparam name="S2">The generic type of <paramref name="symbol2"/>.</typeparam>
        /// <typeparam name="S3">The generic type of <paramref name="symbol3"/>.</typeparam>
        /// <typeparam name="S4">The generic type of <paramref name="symbol4"/>.</typeparam>
        /// <typeparam name="S5">The generic type of <paramref name="symbol5"/>.</typeparam>
        /// <typeparam name="S6">The generic type of <paramref name="symbol6"/>.</typeparam>
        /// <typeparam name="S7">The generic type of <paramref name="symbol7"/>.</typeparam>
        /// <typeparam name="S8">The generic type of <paramref name="symbol8"/>.</typeparam>
        /// <typeparam name="S9">The generic type of <paramref name="symbol9"/>.</typeparam>
        /// <typeparam name="S10">The generic type of <paramref name="symbol10"/>.</typeparam>
        /// <typeparam name="S11">The generic type of <paramref name="symbol11"/>.</typeparam>
        /// <param name="symbol0">The symbol no. 0, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="symbol1">The symbol no. 1, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="symbol2">The symbol no. 2, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="symbol3">The symbol no. 3, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="symbol4">The symbol no. 4, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="symbol5">The symbol no. 5, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="symbol6">The symbol no. 6, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="symbol7">The symbol no. 7, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="symbol8">The symbol no. 8, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="symbol9">The symbol no. 9, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="symbol10">The symbol no. 10, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="symbol11">The symbol no. 11, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="func">The generic production function which gets called upon reduction. The function accepts the value stored inside the produced symbols, and returns the value to be stored inside the non-terminal symbol "<paramref name="non_terminal"/>".</param>
        /// <returns>The newly created production rule.</returns>
        protected ProductionWrapper<S0, S1, S2, S3, S4, S5, S6, S7, S8, S9, S10, S11, T> CreateProduction<T, S0, S1, S2, S3, S4, S5, S6, S7, S8, S9, S10, S11>(NonTerminalWrapper<T> non_terminal, SymbolWrapper<S0> symbol0, SymbolWrapper<S1> symbol1, SymbolWrapper<S2> symbol2, SymbolWrapper<S3> symbol3, SymbolWrapper<S4> symbol4, SymbolWrapper<S5> symbol5, SymbolWrapper<S6> symbol6, SymbolWrapper<S7> symbol7, SymbolWrapper<S8> symbol8, SymbolWrapper<S9> symbol9, SymbolWrapper<S10> symbol10, SymbolWrapper<S11> symbol11, Func<S0, S1, S2, S3, S4, S5, S6, S7, S8, S9, S10, S11, T> func) => non_terminal.AddProduction(symbol0, symbol1, symbol2, symbol3, symbol4, symbol5, symbol6, symbol7, symbol8, symbol9, symbol10, symbol11).SetReduceFunction(func);

        /// <summary>
        /// Creates a new production rule on the given non-terminal symbol using the given production function.
        /// <br/>
        /// This production represents the reducing of the given non-terminal to the 13 given symbols.
        /// </summary>
        /// <param name="non_terminal">The non-terminal symbol which gets reduced.</param>
        /// <typeparam name="T">The generic type of <paramref name="non_terminal"/>.</typeparam>
        /// <typeparam name="S0">The generic type of <paramref name="symbol0"/>.</typeparam>
        /// <typeparam name="S1">The generic type of <paramref name="symbol1"/>.</typeparam>
        /// <typeparam name="S2">The generic type of <paramref name="symbol2"/>.</typeparam>
        /// <typeparam name="S3">The generic type of <paramref name="symbol3"/>.</typeparam>
        /// <typeparam name="S4">The generic type of <paramref name="symbol4"/>.</typeparam>
        /// <typeparam name="S5">The generic type of <paramref name="symbol5"/>.</typeparam>
        /// <typeparam name="S6">The generic type of <paramref name="symbol6"/>.</typeparam>
        /// <typeparam name="S7">The generic type of <paramref name="symbol7"/>.</typeparam>
        /// <typeparam name="S8">The generic type of <paramref name="symbol8"/>.</typeparam>
        /// <typeparam name="S9">The generic type of <paramref name="symbol9"/>.</typeparam>
        /// <typeparam name="S10">The generic type of <paramref name="symbol10"/>.</typeparam>
        /// <typeparam name="S11">The generic type of <paramref name="symbol11"/>.</typeparam>
        /// <typeparam name="S12">The generic type of <paramref name="symbol12"/>.</typeparam>
        /// <param name="symbol0">The symbol no. 0, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="symbol1">The symbol no. 1, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="symbol2">The symbol no. 2, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="symbol3">The symbol no. 3, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="symbol4">The symbol no. 4, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="symbol5">The symbol no. 5, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="symbol6">The symbol no. 6, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="symbol7">The symbol no. 7, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="symbol8">The symbol no. 8, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="symbol9">The symbol no. 9, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="symbol10">The symbol no. 10, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="symbol11">The symbol no. 11, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="symbol12">The symbol no. 12, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="func">The generic production function which gets called upon reduction. The function accepts the value stored inside the produced symbols, and returns the value to be stored inside the non-terminal symbol "<paramref name="non_terminal"/>".</param>
        /// <returns>The newly created production rule.</returns>
        protected ProductionWrapper<S0, S1, S2, S3, S4, S5, S6, S7, S8, S9, S10, S11, S12, T> CreateProduction<T, S0, S1, S2, S3, S4, S5, S6, S7, S8, S9, S10, S11, S12>(NonTerminalWrapper<T> non_terminal, SymbolWrapper<S0> symbol0, SymbolWrapper<S1> symbol1, SymbolWrapper<S2> symbol2, SymbolWrapper<S3> symbol3, SymbolWrapper<S4> symbol4, SymbolWrapper<S5> symbol5, SymbolWrapper<S6> symbol6, SymbolWrapper<S7> symbol7, SymbolWrapper<S8> symbol8, SymbolWrapper<S9> symbol9, SymbolWrapper<S10> symbol10, SymbolWrapper<S11> symbol11, SymbolWrapper<S12> symbol12, Func<S0, S1, S2, S3, S4, S5, S6, S7, S8, S9, S10, S11, S12, T> func) => non_terminal.AddProduction(symbol0, symbol1, symbol2, symbol3, symbol4, symbol5, symbol6, symbol7, symbol8, symbol9, symbol10, symbol11, symbol12).SetReduceFunction(func);

        /// <summary>
        /// Creates a new production rule on the given non-terminal symbol using the given production function.
        /// <br/>
        /// This production represents the reducing of the given non-terminal to the 14 given symbols.
        /// </summary>
        /// <param name="non_terminal">The non-terminal symbol which gets reduced.</param>
        /// <typeparam name="T">The generic type of <paramref name="non_terminal"/>.</typeparam>
        /// <typeparam name="S0">The generic type of <paramref name="symbol0"/>.</typeparam>
        /// <typeparam name="S1">The generic type of <paramref name="symbol1"/>.</typeparam>
        /// <typeparam name="S2">The generic type of <paramref name="symbol2"/>.</typeparam>
        /// <typeparam name="S3">The generic type of <paramref name="symbol3"/>.</typeparam>
        /// <typeparam name="S4">The generic type of <paramref name="symbol4"/>.</typeparam>
        /// <typeparam name="S5">The generic type of <paramref name="symbol5"/>.</typeparam>
        /// <typeparam name="S6">The generic type of <paramref name="symbol6"/>.</typeparam>
        /// <typeparam name="S7">The generic type of <paramref name="symbol7"/>.</typeparam>
        /// <typeparam name="S8">The generic type of <paramref name="symbol8"/>.</typeparam>
        /// <typeparam name="S9">The generic type of <paramref name="symbol9"/>.</typeparam>
        /// <typeparam name="S10">The generic type of <paramref name="symbol10"/>.</typeparam>
        /// <typeparam name="S11">The generic type of <paramref name="symbol11"/>.</typeparam>
        /// <typeparam name="S12">The generic type of <paramref name="symbol12"/>.</typeparam>
        /// <typeparam name="S13">The generic type of <paramref name="symbol13"/>.</typeparam>
        /// <param name="symbol0">The symbol no. 0, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="symbol1">The symbol no. 1, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="symbol2">The symbol no. 2, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="symbol3">The symbol no. 3, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="symbol4">The symbol no. 4, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="symbol5">The symbol no. 5, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="symbol6">The symbol no. 6, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="symbol7">The symbol no. 7, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="symbol8">The symbol no. 8, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="symbol9">The symbol no. 9, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="symbol10">The symbol no. 10, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="symbol11">The symbol no. 11, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="symbol12">The symbol no. 12, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="symbol13">The symbol no. 13, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="func">The generic production function which gets called upon reduction. The function accepts the value stored inside the produced symbols, and returns the value to be stored inside the non-terminal symbol "<paramref name="non_terminal"/>".</param>
        /// <returns>The newly created production rule.</returns>
        protected ProductionWrapper<S0, S1, S2, S3, S4, S5, S6, S7, S8, S9, S10, S11, S12, S13, T> CreateProduction<T, S0, S1, S2, S3, S4, S5, S6, S7, S8, S9, S10, S11, S12, S13>(NonTerminalWrapper<T> non_terminal, SymbolWrapper<S0> symbol0, SymbolWrapper<S1> symbol1, SymbolWrapper<S2> symbol2, SymbolWrapper<S3> symbol3, SymbolWrapper<S4> symbol4, SymbolWrapper<S5> symbol5, SymbolWrapper<S6> symbol6, SymbolWrapper<S7> symbol7, SymbolWrapper<S8> symbol8, SymbolWrapper<S9> symbol9, SymbolWrapper<S10> symbol10, SymbolWrapper<S11> symbol11, SymbolWrapper<S12> symbol12, SymbolWrapper<S13> symbol13, Func<S0, S1, S2, S3, S4, S5, S6, S7, S8, S9, S10, S11, S12, S13, T> func) => non_terminal.AddProduction(symbol0, symbol1, symbol2, symbol3, symbol4, symbol5, symbol6, symbol7, symbol8, symbol9, symbol10, symbol11, symbol12, symbol13).SetReduceFunction(func);

        /// <summary>
        /// Creates a new production rule on the given non-terminal symbol using the given production function.
        /// <br/>
        /// This production represents the reducing of the given non-terminal to the 15 given symbols.
        /// </summary>
        /// <param name="non_terminal">The non-terminal symbol which gets reduced.</param>
        /// <typeparam name="T">The generic type of <paramref name="non_terminal"/>.</typeparam>
        /// <typeparam name="S0">The generic type of <paramref name="symbol0"/>.</typeparam>
        /// <typeparam name="S1">The generic type of <paramref name="symbol1"/>.</typeparam>
        /// <typeparam name="S2">The generic type of <paramref name="symbol2"/>.</typeparam>
        /// <typeparam name="S3">The generic type of <paramref name="symbol3"/>.</typeparam>
        /// <typeparam name="S4">The generic type of <paramref name="symbol4"/>.</typeparam>
        /// <typeparam name="S5">The generic type of <paramref name="symbol5"/>.</typeparam>
        /// <typeparam name="S6">The generic type of <paramref name="symbol6"/>.</typeparam>
        /// <typeparam name="S7">The generic type of <paramref name="symbol7"/>.</typeparam>
        /// <typeparam name="S8">The generic type of <paramref name="symbol8"/>.</typeparam>
        /// <typeparam name="S9">The generic type of <paramref name="symbol9"/>.</typeparam>
        /// <typeparam name="S10">The generic type of <paramref name="symbol10"/>.</typeparam>
        /// <typeparam name="S11">The generic type of <paramref name="symbol11"/>.</typeparam>
        /// <typeparam name="S12">The generic type of <paramref name="symbol12"/>.</typeparam>
        /// <typeparam name="S13">The generic type of <paramref name="symbol13"/>.</typeparam>
        /// <typeparam name="S14">The generic type of <paramref name="symbol14"/>.</typeparam>
        /// <param name="symbol0">The symbol no. 0, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="symbol1">The symbol no. 1, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="symbol2">The symbol no. 2, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="symbol3">The symbol no. 3, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="symbol4">The symbol no. 4, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="symbol5">The symbol no. 5, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="symbol6">The symbol no. 6, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="symbol7">The symbol no. 7, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="symbol8">The symbol no. 8, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="symbol9">The symbol no. 9, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="symbol10">The symbol no. 10, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="symbol11">The symbol no. 11, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="symbol12">The symbol no. 12, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="symbol13">The symbol no. 13, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="symbol14">The symbol no. 14, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="func">The generic production function which gets called upon reduction. The function accepts the value stored inside the produced symbols, and returns the value to be stored inside the non-terminal symbol "<paramref name="non_terminal"/>".</param>
        /// <returns>The newly created production rule.</returns>
        protected ProductionWrapper<S0, S1, S2, S3, S4, S5, S6, S7, S8, S9, S10, S11, S12, S13, S14, T> CreateProduction<T, S0, S1, S2, S3, S4, S5, S6, S7, S8, S9, S10, S11, S12, S13, S14>(NonTerminalWrapper<T> non_terminal, SymbolWrapper<S0> symbol0, SymbolWrapper<S1> symbol1, SymbolWrapper<S2> symbol2, SymbolWrapper<S3> symbol3, SymbolWrapper<S4> symbol4, SymbolWrapper<S5> symbol5, SymbolWrapper<S6> symbol6, SymbolWrapper<S7> symbol7, SymbolWrapper<S8> symbol8, SymbolWrapper<S9> symbol9, SymbolWrapper<S10> symbol10, SymbolWrapper<S11> symbol11, SymbolWrapper<S12> symbol12, SymbolWrapper<S13> symbol13, SymbolWrapper<S14> symbol14, Func<S0, S1, S2, S3, S4, S5, S6, S7, S8, S9, S10, S11, S12, S13, S14, T> func) => non_terminal.AddProduction(symbol0, symbol1, symbol2, symbol3, symbol4, symbol5, symbol6, symbol7, symbol8, symbol9, symbol10, symbol11, symbol12, symbol13, symbol14).SetReduceFunction(func);

        /// <summary>
        /// Creates a new production rule on the given non-terminal symbol using the given production function.
        /// <br/>
        /// This production represents the reducing of the given non-terminal to the 16 given symbols.
        /// </summary>
        /// <param name="non_terminal">The non-terminal symbol which gets reduced.</param>
        /// <typeparam name="T">The generic type of <paramref name="non_terminal"/>.</typeparam>
        /// <typeparam name="S0">The generic type of <paramref name="symbol0"/>.</typeparam>
        /// <typeparam name="S1">The generic type of <paramref name="symbol1"/>.</typeparam>
        /// <typeparam name="S2">The generic type of <paramref name="symbol2"/>.</typeparam>
        /// <typeparam name="S3">The generic type of <paramref name="symbol3"/>.</typeparam>
        /// <typeparam name="S4">The generic type of <paramref name="symbol4"/>.</typeparam>
        /// <typeparam name="S5">The generic type of <paramref name="symbol5"/>.</typeparam>
        /// <typeparam name="S6">The generic type of <paramref name="symbol6"/>.</typeparam>
        /// <typeparam name="S7">The generic type of <paramref name="symbol7"/>.</typeparam>
        /// <typeparam name="S8">The generic type of <paramref name="symbol8"/>.</typeparam>
        /// <typeparam name="S9">The generic type of <paramref name="symbol9"/>.</typeparam>
        /// <typeparam name="S10">The generic type of <paramref name="symbol10"/>.</typeparam>
        /// <typeparam name="S11">The generic type of <paramref name="symbol11"/>.</typeparam>
        /// <typeparam name="S12">The generic type of <paramref name="symbol12"/>.</typeparam>
        /// <typeparam name="S13">The generic type of <paramref name="symbol13"/>.</typeparam>
        /// <typeparam name="S14">The generic type of <paramref name="symbol14"/>.</typeparam>
        /// <typeparam name="S15">The generic type of <paramref name="symbol15"/>.</typeparam>
        /// <param name="symbol0">The symbol no. 0, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="symbol1">The symbol no. 1, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="symbol2">The symbol no. 2, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="symbol3">The symbol no. 3, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="symbol4">The symbol no. 4, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="symbol5">The symbol no. 5, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="symbol6">The symbol no. 6, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="symbol7">The symbol no. 7, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="symbol8">The symbol no. 8, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="symbol9">The symbol no. 9, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="symbol10">The symbol no. 10, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="symbol11">The symbol no. 11, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="symbol12">The symbol no. 12, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="symbol13">The symbol no. 13, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="symbol14">The symbol no. 14, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="symbol15">The symbol no. 15, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="func">The generic production function which gets called upon reduction. The function accepts the value stored inside the produced symbols, and returns the value to be stored inside the non-terminal symbol "<paramref name="non_terminal"/>".</param>
        /// <returns>The newly created production rule.</returns>
        protected ProductionWrapper<S0, S1, S2, S3, S4, S5, S6, S7, S8, S9, S10, S11, S12, S13, S14, S15, T> CreateProduction<T, S0, S1, S2, S3, S4, S5, S6, S7, S8, S9, S10, S11, S12, S13, S14, S15>(NonTerminalWrapper<T> non_terminal, SymbolWrapper<S0> symbol0, SymbolWrapper<S1> symbol1, SymbolWrapper<S2> symbol2, SymbolWrapper<S3> symbol3, SymbolWrapper<S4> symbol4, SymbolWrapper<S5> symbol5, SymbolWrapper<S6> symbol6, SymbolWrapper<S7> symbol7, SymbolWrapper<S8> symbol8, SymbolWrapper<S9> symbol9, SymbolWrapper<S10> symbol10, SymbolWrapper<S11> symbol11, SymbolWrapper<S12> symbol12, SymbolWrapper<S13> symbol13, SymbolWrapper<S14> symbol14, SymbolWrapper<S15> symbol15, Func<S0, S1, S2, S3, S4, S5, S6, S7, S8, S9, S10, S11, S12, S13, S14, S15, T> func) => non_terminal.AddProduction(symbol0, symbol1, symbol2, symbol3, symbol4, symbol5, symbol6, symbol7, symbol8, symbol9, symbol10, symbol11, symbol12, symbol13, symbol14, symbol15).SetReduceFunction(func);

        /// <summary>
        /// Creates a new parser based on the current configurator and returns it.
        /// <para/>
        /// <b>Note:</b> Only the first call of <see cref="CreateParser"/> creates a new parser. If you wish to reset the generated parser and re-create it, call the method <see cref="ReesetParser"/> beforehand.
        /// </summary>
        /// <returns>The constructed parser.</returns>
        public ParserWrapper CreateParser()
        {
            if (_parser is null)
            {
                NonTerminalWrapper<TOut> nt = CreateNonTerminal<TOut>();

                Construct(nt);

                Configurator.SetStartSymbol((INonTerminal<object>)nt.Symbol);
                _parser = new ParserWrapper(Configurator.CreateParser());
            }

            return _parser;
        }

        /// <summary>
        /// Resets the constructed parser to <see langword="null"/>, thereby forcing the parser to be re-constructed based on the current conficuration the next time <see cref="CreateParser"/> is called.
        /// </summary>
        public void ResetParser() => _parser = null;

        /// <summary>
        /// Constructs the parser. This method must be implemented by every constructor based on <see cref="ParserConstructor{TOut}"/>
        /// </summary>
        /// <param name="start_symbol">The non-terminal production start symbol. The value of this symbol will be returned when the constructed parser is executed.</param>
        protected abstract void Construct(NonTerminalWrapper<TOut> start_symbol);


        /// <summary>
        /// Represents a wrapper for the generic parser.
        /// </summary>
        public sealed class ParserWrapper
        {
            /// <summary>
            /// The internal parser instance.
            /// </summary>
            public IParser<object> Parser { get; }


            internal ParserWrapper(IParser<object> parser) => Parser = parser;

            /// <summary>
            /// Tries to parse the given string and returns whether the parsing was successful.
            /// </summary>
            /// <param name="input">The input string.</param>
            /// <param name="result">The parsed value.</param>
            public bool TryParse(string input, [MaybeNullWhen(false)] out ParserResult<TOut>? result)
            {
                try
                {
                    result = Parse(input);
                }
                catch (LexerException)
                {
                    result = null;
                }

                return result is { };
            }

            /// <summary>
            /// Parses the given string and returns the parsed value of the type <typeparamref name="TOut"/>.
            /// </summary>
            /// <param name="input">The input string.</param>
            /// <returns>The parsed value.</returns>
            public ParserResult<TOut> Parse(string input)
            {
                List<LexedToken<object>> tokens = new List<LexedToken<object>>();
                void aggregate(LexedToken<object> token)
                {
                    tokens.Add(token);

                    if (token is LexedNonTerminal<object> nt)
                        foreach (LexedToken<object> child in nt.ChildNodes)
                            aggregate(child);
                }

                aggregate(Parser.ParseTokens(input));

                return new ParserResult<TOut>((TOut)tokens[0].SymbolValue, input.Split('\n'), tokens.ToArray());
            }
        }
    }

    public sealed class ParserResult<TOut>
    {
        public TOut ParsedValue { get; }
        public string[] SourceLines { get; }
        public LexedToken<object>[] LexedTokens { get; }


        internal ParserResult(TOut parsedValue, string[] sourceLines, LexedToken<object>[] lexedTokens)
        {
            ParsedValue = parsedValue;
            SourceLines = sourceLines;
            LexedTokens = lexedTokens;
        }

        public static implicit operator TOut(ParserResult<TOut> res) => res.ParsedValue;
    }

    /// <summary>
    /// An interface for generic terminal wrappers.
    /// </summary>
    public interface ITerminalWrapper
    {
        /// <summary>
        /// The underlying terminal symbol.
        /// </summary>
        ITerminal<object> Symbol { get; }
    }

    /// <summary>
    /// Represents a generic symbol wrapper.
    /// </summary>
    /// <typeparam name="T">The generic type stored inside the symbol.</typeparam>
    public class SymbolWrapper<T>
    {
        /// <summary>
        /// The underlying (boxed) symbol.
        /// </summary>
        public ISymbol<object> Symbol { get; }
        /// <summary>
        /// The type of the generic value stored inside the symbol.
        /// </summary>
        public Type SymbolType => typeof(T);


        /// <summary>
        /// Creates a new generic symbol wrapper for the given (boxed) symbol.
        /// </summary>
        /// <param name="symbol">Boxed symbol.</param>
        public SymbolWrapper(ISymbol<object> symbol) => Symbol = symbol;

        /// <inheritdoc/>
        public override string? ToString() => Symbol.ToString();
    }

    /// <summary>
    /// Represents a generic terminal symbol wrapper.
    /// </summary>
    /// <inheritdoc/>
    /// <typeparam name="T">The generic type stored inside the symbol.</typeparam>
    public sealed class TerminalWrapper<T>
        : SymbolWrapper<T>
        , ITerminalWrapper
    {
        /// <inheritdoc/>
        ITerminal<object> ITerminalWrapper.Symbol => (ITerminal<object>)Symbol;

        /// <summary>
        /// Creates a new generic symbol wrapper for the given (boxed) terminal symbol.
        /// </summary>
        /// <param name="symbol">Boxed terminal symbol.</param>
        public TerminalWrapper(ISymbol<object> symbol)
            : base(symbol)
        {
        }
    }

    /// <summary>
    /// Represents a generic non-terminal symbol wrapper.
    /// </summary>
    /// <inheritdoc/>
    /// <typeparam name="T">The generic type stored inside the symbol.</typeparam>
    public sealed class NonTerminalWrapper<T>
        : SymbolWrapper<T>
    {
        /// <summary>
        /// Creates a new generic symbol wrapper for the given (boxed) non-terminal symbol.
        /// </summary>
        /// <param name="symbol">Boxed non-terminal symbol.</param>
        public NonTerminalWrapper(ISymbol<object> symbol)
            : base(symbol)
        {
        }

        /// <summary>
        /// Creates a new (empty) production rule on the current non-terminal symbol and returns it.
        /// </summary>
        /// <returns>The newly created production rule.</returns>
        public ProductionWrapper<T> AddProduction() => new ProductionWrapper<T>(((INonTerminal<object>)Symbol).AddProduction());

        /// <summary>
        /// Creates a new production rule on the current non-terminal symbol.
        /// <br/>
        /// This production represents the reducing of the current non-terminal to the 1 given symbols.
        /// </summary>
        /// <typeparam name="T0">The generic type of <paramref name="sym0"/>.</typeparam>
        /// <param name="sym0">The symbol no. 0, to which the current non-terminal symbol gets reduced.</param>
        /// <returns>The newly created production rule.</returns>
        public ProductionWrapper<T0, T> AddProduction<T0>(SymbolWrapper<T0> sym0) =>
            new ProductionWrapper<T0, T>(((INonTerminal<object>)Symbol).AddProduction(sym0.Symbol));

        /// <summary>
        /// Creates a new production rule on the current non-terminal symbol.
        /// <br/>
        /// This production represents the reducing of the current non-terminal to the 2 given symbols.
        /// </summary>
        /// <typeparam name="T0">The generic type of <paramref name="sym0"/>.</typeparam>
        /// <typeparam name="T1">The generic type of <paramref name="sym1"/>.</typeparam>
        /// <param name="sym0">The symbol no. 0, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="sym1">The symbol no. 1, to which the current non-terminal symbol gets reduced.</param>
        /// <returns>The newly created production rule.</returns>
        public ProductionWrapper<T0, T1, T> AddProduction<T0, T1>(SymbolWrapper<T0> sym0, SymbolWrapper<T1> sym1) =>
            new ProductionWrapper<T0, T1, T>(((INonTerminal<object>)Symbol).AddProduction(sym0.Symbol, sym1.Symbol));

        /// <summary>
        /// Creates a new production rule on the current non-terminal symbol.
        /// <br/>
        /// This production represents the reducing of the current non-terminal to the 3 given symbols.
        /// </summary>
        /// <typeparam name="T0">The generic type of <paramref name="sym0"/>.</typeparam>
        /// <typeparam name="T1">The generic type of <paramref name="sym1"/>.</typeparam>
        /// <typeparam name="T2">The generic type of <paramref name="sym2"/>.</typeparam>
        /// <param name="sym0">The symbol no. 0, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="sym1">The symbol no. 1, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="sym2">The symbol no. 2, to which the current non-terminal symbol gets reduced.</param>
        /// <returns>The newly created production rule.</returns>
        public ProductionWrapper<T0, T1, T2, T> AddProduction<T0, T1, T2>(SymbolWrapper<T0> sym0, SymbolWrapper<T1> sym1, SymbolWrapper<T2> sym2) =>
            new ProductionWrapper<T0, T1, T2, T>(((INonTerminal<object>)Symbol).AddProduction(sym0.Symbol, sym1.Symbol, sym2.Symbol));

        /// <summary>
        /// Creates a new production rule on the current non-terminal symbol.
        /// <br/>
        /// This production represents the reducing of the current non-terminal to the 4 given symbols.
        /// </summary>
        /// <typeparam name="T0">The generic type of <paramref name="sym0"/>.</typeparam>
        /// <typeparam name="T1">The generic type of <paramref name="sym1"/>.</typeparam>
        /// <typeparam name="T2">The generic type of <paramref name="sym2"/>.</typeparam>
        /// <typeparam name="T3">The generic type of <paramref name="sym3"/>.</typeparam>
        /// <param name="sym0">The symbol no. 0, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="sym1">The symbol no. 1, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="sym2">The symbol no. 2, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="sym3">The symbol no. 3, to which the current non-terminal symbol gets reduced.</param>
        /// <returns>The newly created production rule.</returns>
        public ProductionWrapper<T0, T1, T2, T3, T> AddProduction<T0, T1, T2, T3>(SymbolWrapper<T0> sym0, SymbolWrapper<T1> sym1, SymbolWrapper<T2> sym2, SymbolWrapper<T3> sym3) =>
            new ProductionWrapper<T0, T1, T2, T3, T>(((INonTerminal<object>)Symbol).AddProduction(sym0.Symbol, sym1.Symbol, sym2.Symbol, sym3.Symbol));

        /// <summary>
        /// Creates a new production rule on the current non-terminal symbol.
        /// <br/>
        /// This production represents the reducing of the current non-terminal to the 5 given symbols.
        /// </summary>
        /// <typeparam name="T0">The generic type of <paramref name="sym0"/>.</typeparam>
        /// <typeparam name="T1">The generic type of <paramref name="sym1"/>.</typeparam>
        /// <typeparam name="T2">The generic type of <paramref name="sym2"/>.</typeparam>
        /// <typeparam name="T3">The generic type of <paramref name="sym3"/>.</typeparam>
        /// <typeparam name="T4">The generic type of <paramref name="sym4"/>.</typeparam>
        /// <param name="sym0">The symbol no. 0, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="sym1">The symbol no. 1, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="sym2">The symbol no. 2, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="sym3">The symbol no. 3, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="sym4">The symbol no. 4, to which the current non-terminal symbol gets reduced.</param>
        /// <returns>The newly created production rule.</returns>
        public ProductionWrapper<T0, T1, T2, T3, T4, T> AddProduction<T0, T1, T2, T3, T4>(SymbolWrapper<T0> sym0, SymbolWrapper<T1> sym1, SymbolWrapper<T2> sym2, SymbolWrapper<T3> sym3, SymbolWrapper<T4> sym4) =>
            new ProductionWrapper<T0, T1, T2, T3, T4, T>(((INonTerminal<object>)Symbol).AddProduction(sym0.Symbol, sym1.Symbol, sym2.Symbol, sym3.Symbol, sym4.Symbol));

        /// <summary>
        /// Creates a new production rule on the current non-terminal symbol.
        /// <br/>
        /// This production represents the reducing of the current non-terminal to the 6 given symbols.
        /// </summary>
        /// <typeparam name="T0">The generic type of <paramref name="sym0"/>.</typeparam>
        /// <typeparam name="T1">The generic type of <paramref name="sym1"/>.</typeparam>
        /// <typeparam name="T2">The generic type of <paramref name="sym2"/>.</typeparam>
        /// <typeparam name="T3">The generic type of <paramref name="sym3"/>.</typeparam>
        /// <typeparam name="T4">The generic type of <paramref name="sym4"/>.</typeparam>
        /// <typeparam name="T5">The generic type of <paramref name="sym5"/>.</typeparam>
        /// <param name="sym0">The symbol no. 0, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="sym1">The symbol no. 1, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="sym2">The symbol no. 2, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="sym3">The symbol no. 3, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="sym4">The symbol no. 4, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="sym5">The symbol no. 5, to which the current non-terminal symbol gets reduced.</param>
        /// <returns>The newly created production rule.</returns>
        public ProductionWrapper<T0, T1, T2, T3, T4, T5, T> AddProduction<T0, T1, T2, T3, T4, T5>(SymbolWrapper<T0> sym0, SymbolWrapper<T1> sym1, SymbolWrapper<T2> sym2, SymbolWrapper<T3> sym3, SymbolWrapper<T4> sym4, SymbolWrapper<T5> sym5) =>
            new ProductionWrapper<T0, T1, T2, T3, T4, T5, T>(((INonTerminal<object>)Symbol).AddProduction(sym0.Symbol, sym1.Symbol, sym2.Symbol, sym3.Symbol, sym4.Symbol, sym5.Symbol));

        /// <summary>
        /// Creates a new production rule on the current non-terminal symbol.
        /// <br/>
        /// This production represents the reducing of the current non-terminal to the 7 given symbols.
        /// </summary>
        /// <typeparam name="T0">The generic type of <paramref name="sym0"/>.</typeparam>
        /// <typeparam name="T1">The generic type of <paramref name="sym1"/>.</typeparam>
        /// <typeparam name="T2">The generic type of <paramref name="sym2"/>.</typeparam>
        /// <typeparam name="T3">The generic type of <paramref name="sym3"/>.</typeparam>
        /// <typeparam name="T4">The generic type of <paramref name="sym4"/>.</typeparam>
        /// <typeparam name="T5">The generic type of <paramref name="sym5"/>.</typeparam>
        /// <typeparam name="T6">The generic type of <paramref name="sym6"/>.</typeparam>
        /// <param name="sym0">The symbol no. 0, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="sym1">The symbol no. 1, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="sym2">The symbol no. 2, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="sym3">The symbol no. 3, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="sym4">The symbol no. 4, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="sym5">The symbol no. 5, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="sym6">The symbol no. 6, to which the current non-terminal symbol gets reduced.</param>
        /// <returns>The newly created production rule.</returns>
        public ProductionWrapper<T0, T1, T2, T3, T4, T5, T6, T> AddProduction<T0, T1, T2, T3, T4, T5, T6>(SymbolWrapper<T0> sym0, SymbolWrapper<T1> sym1, SymbolWrapper<T2> sym2, SymbolWrapper<T3> sym3, SymbolWrapper<T4> sym4, SymbolWrapper<T5> sym5, SymbolWrapper<T6> sym6) =>
            new ProductionWrapper<T0, T1, T2, T3, T4, T5, T6, T>(((INonTerminal<object>)Symbol).AddProduction(sym0.Symbol, sym1.Symbol, sym2.Symbol, sym3.Symbol, sym4.Symbol, sym5.Symbol, sym6.Symbol));

        /// <summary>
        /// Creates a new production rule on the current non-terminal symbol.
        /// <br/>
        /// This production represents the reducing of the current non-terminal to the 8 given symbols.
        /// </summary>
        /// <typeparam name="T0">The generic type of <paramref name="sym0"/>.</typeparam>
        /// <typeparam name="T1">The generic type of <paramref name="sym1"/>.</typeparam>
        /// <typeparam name="T2">The generic type of <paramref name="sym2"/>.</typeparam>
        /// <typeparam name="T3">The generic type of <paramref name="sym3"/>.</typeparam>
        /// <typeparam name="T4">The generic type of <paramref name="sym4"/>.</typeparam>
        /// <typeparam name="T5">The generic type of <paramref name="sym5"/>.</typeparam>
        /// <typeparam name="T6">The generic type of <paramref name="sym6"/>.</typeparam>
        /// <typeparam name="T7">The generic type of <paramref name="sym7"/>.</typeparam>
        /// <param name="sym0">The symbol no. 0, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="sym1">The symbol no. 1, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="sym2">The symbol no. 2, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="sym3">The symbol no. 3, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="sym4">The symbol no. 4, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="sym5">The symbol no. 5, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="sym6">The symbol no. 6, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="sym7">The symbol no. 7, to which the current non-terminal symbol gets reduced.</param>
        /// <returns>The newly created production rule.</returns>
        public ProductionWrapper<T0, T1, T2, T3, T4, T5, T6, T7, T> AddProduction<T0, T1, T2, T3, T4, T5, T6, T7>(SymbolWrapper<T0> sym0, SymbolWrapper<T1> sym1, SymbolWrapper<T2> sym2, SymbolWrapper<T3> sym3, SymbolWrapper<T4> sym4, SymbolWrapper<T5> sym5, SymbolWrapper<T6> sym6, SymbolWrapper<T7> sym7) =>
            new ProductionWrapper<T0, T1, T2, T3, T4, T5, T6, T7, T>(((INonTerminal<object>)Symbol).AddProduction(sym0.Symbol, sym1.Symbol, sym2.Symbol, sym3.Symbol, sym4.Symbol, sym5.Symbol, sym6.Symbol, sym7.Symbol));

        /// <summary>
        /// Creates a new production rule on the current non-terminal symbol.
        /// <br/>
        /// This production represents the reducing of the current non-terminal to the 9 given symbols.
        /// </summary>
        /// <typeparam name="T0">The generic type of <paramref name="sym0"/>.</typeparam>
        /// <typeparam name="T1">The generic type of <paramref name="sym1"/>.</typeparam>
        /// <typeparam name="T2">The generic type of <paramref name="sym2"/>.</typeparam>
        /// <typeparam name="T3">The generic type of <paramref name="sym3"/>.</typeparam>
        /// <typeparam name="T4">The generic type of <paramref name="sym4"/>.</typeparam>
        /// <typeparam name="T5">The generic type of <paramref name="sym5"/>.</typeparam>
        /// <typeparam name="T6">The generic type of <paramref name="sym6"/>.</typeparam>
        /// <typeparam name="T7">The generic type of <paramref name="sym7"/>.</typeparam>
        /// <typeparam name="T8">The generic type of <paramref name="sym8"/>.</typeparam>
        /// <param name="sym0">The symbol no. 0, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="sym1">The symbol no. 1, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="sym2">The symbol no. 2, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="sym3">The symbol no. 3, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="sym4">The symbol no. 4, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="sym5">The symbol no. 5, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="sym6">The symbol no. 6, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="sym7">The symbol no. 7, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="sym8">The symbol no. 8, to which the current non-terminal symbol gets reduced.</param>
        /// <returns>The newly created production rule.</returns>
        public ProductionWrapper<T0, T1, T2, T3, T4, T5, T6, T7, T8, T> AddProduction<T0, T1, T2, T3, T4, T5, T6, T7, T8>(SymbolWrapper<T0> sym0, SymbolWrapper<T1> sym1, SymbolWrapper<T2> sym2, SymbolWrapper<T3> sym3, SymbolWrapper<T4> sym4, SymbolWrapper<T5> sym5, SymbolWrapper<T6> sym6, SymbolWrapper<T7> sym7, SymbolWrapper<T8> sym8) =>
            new ProductionWrapper<T0, T1, T2, T3, T4, T5, T6, T7, T8, T>(((INonTerminal<object>)Symbol).AddProduction(sym0.Symbol, sym1.Symbol, sym2.Symbol, sym3.Symbol, sym4.Symbol, sym5.Symbol, sym6.Symbol, sym7.Symbol, sym8.Symbol));

        /// <summary>
        /// Creates a new production rule on the current non-terminal symbol.
        /// <br/>
        /// This production represents the reducing of the current non-terminal to the 10 given symbols.
        /// </summary>
        /// <typeparam name="T0">The generic type of <paramref name="sym0"/>.</typeparam>
        /// <typeparam name="T1">The generic type of <paramref name="sym1"/>.</typeparam>
        /// <typeparam name="T2">The generic type of <paramref name="sym2"/>.</typeparam>
        /// <typeparam name="T3">The generic type of <paramref name="sym3"/>.</typeparam>
        /// <typeparam name="T4">The generic type of <paramref name="sym4"/>.</typeparam>
        /// <typeparam name="T5">The generic type of <paramref name="sym5"/>.</typeparam>
        /// <typeparam name="T6">The generic type of <paramref name="sym6"/>.</typeparam>
        /// <typeparam name="T7">The generic type of <paramref name="sym7"/>.</typeparam>
        /// <typeparam name="T8">The generic type of <paramref name="sym8"/>.</typeparam>
        /// <typeparam name="T9">The generic type of <paramref name="sym9"/>.</typeparam>
        /// <param name="sym0">The symbol no. 0, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="sym1">The symbol no. 1, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="sym2">The symbol no. 2, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="sym3">The symbol no. 3, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="sym4">The symbol no. 4, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="sym5">The symbol no. 5, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="sym6">The symbol no. 6, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="sym7">The symbol no. 7, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="sym8">The symbol no. 8, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="sym9">The symbol no. 9, to which the current non-terminal symbol gets reduced.</param>
        /// <returns>The newly created production rule.</returns>
        public ProductionWrapper<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T> AddProduction<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(SymbolWrapper<T0> sym0, SymbolWrapper<T1> sym1, SymbolWrapper<T2> sym2, SymbolWrapper<T3> sym3, SymbolWrapper<T4> sym4, SymbolWrapper<T5> sym5, SymbolWrapper<T6> sym6, SymbolWrapper<T7> sym7, SymbolWrapper<T8> sym8, SymbolWrapper<T9> sym9) =>
            new ProductionWrapper<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T>(((INonTerminal<object>)Symbol).AddProduction(sym0.Symbol, sym1.Symbol, sym2.Symbol, sym3.Symbol, sym4.Symbol, sym5.Symbol, sym6.Symbol, sym7.Symbol, sym8.Symbol, sym9.Symbol));

        /// <summary>
        /// Creates a new production rule on the current non-terminal symbol.
        /// <br/>
        /// This production represents the reducing of the current non-terminal to the 11 given symbols.
        /// </summary>
        /// <typeparam name="T0">The generic type of <paramref name="sym0"/>.</typeparam>
        /// <typeparam name="T1">The generic type of <paramref name="sym1"/>.</typeparam>
        /// <typeparam name="T2">The generic type of <paramref name="sym2"/>.</typeparam>
        /// <typeparam name="T3">The generic type of <paramref name="sym3"/>.</typeparam>
        /// <typeparam name="T4">The generic type of <paramref name="sym4"/>.</typeparam>
        /// <typeparam name="T5">The generic type of <paramref name="sym5"/>.</typeparam>
        /// <typeparam name="T6">The generic type of <paramref name="sym6"/>.</typeparam>
        /// <typeparam name="T7">The generic type of <paramref name="sym7"/>.</typeparam>
        /// <typeparam name="T8">The generic type of <paramref name="sym8"/>.</typeparam>
        /// <typeparam name="T9">The generic type of <paramref name="sym9"/>.</typeparam>
        /// <typeparam name="T10">The generic type of <paramref name="sym10"/>.</typeparam>
        /// <param name="sym0">The symbol no. 0, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="sym1">The symbol no. 1, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="sym2">The symbol no. 2, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="sym3">The symbol no. 3, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="sym4">The symbol no. 4, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="sym5">The symbol no. 5, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="sym6">The symbol no. 6, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="sym7">The symbol no. 7, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="sym8">The symbol no. 8, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="sym9">The symbol no. 9, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="sym10">The symbol no. 10, to which the current non-terminal symbol gets reduced.</param>
        /// <returns>The newly created production rule.</returns>
        public ProductionWrapper<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T> AddProduction<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(SymbolWrapper<T0> sym0, SymbolWrapper<T1> sym1, SymbolWrapper<T2> sym2, SymbolWrapper<T3> sym3, SymbolWrapper<T4> sym4, SymbolWrapper<T5> sym5, SymbolWrapper<T6> sym6, SymbolWrapper<T7> sym7, SymbolWrapper<T8> sym8, SymbolWrapper<T9> sym9, SymbolWrapper<T10> sym10) =>
            new ProductionWrapper<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T>(((INonTerminal<object>)Symbol).AddProduction(sym0.Symbol, sym1.Symbol, sym2.Symbol, sym3.Symbol, sym4.Symbol, sym5.Symbol, sym6.Symbol, sym7.Symbol, sym8.Symbol, sym9.Symbol, sym10.Symbol));

        /// <summary>
        /// Creates a new production rule on the current non-terminal symbol.
        /// <br/>
        /// This production represents the reducing of the current non-terminal to the 12 given symbols.
        /// </summary>
        /// <typeparam name="T0">The generic type of <paramref name="sym0"/>.</typeparam>
        /// <typeparam name="T1">The generic type of <paramref name="sym1"/>.</typeparam>
        /// <typeparam name="T2">The generic type of <paramref name="sym2"/>.</typeparam>
        /// <typeparam name="T3">The generic type of <paramref name="sym3"/>.</typeparam>
        /// <typeparam name="T4">The generic type of <paramref name="sym4"/>.</typeparam>
        /// <typeparam name="T5">The generic type of <paramref name="sym5"/>.</typeparam>
        /// <typeparam name="T6">The generic type of <paramref name="sym6"/>.</typeparam>
        /// <typeparam name="T7">The generic type of <paramref name="sym7"/>.</typeparam>
        /// <typeparam name="T8">The generic type of <paramref name="sym8"/>.</typeparam>
        /// <typeparam name="T9">The generic type of <paramref name="sym9"/>.</typeparam>
        /// <typeparam name="T10">The generic type of <paramref name="sym10"/>.</typeparam>
        /// <typeparam name="T11">The generic type of <paramref name="sym11"/>.</typeparam>
        /// <param name="sym0">The symbol no. 0, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="sym1">The symbol no. 1, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="sym2">The symbol no. 2, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="sym3">The symbol no. 3, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="sym4">The symbol no. 4, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="sym5">The symbol no. 5, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="sym6">The symbol no. 6, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="sym7">The symbol no. 7, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="sym8">The symbol no. 8, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="sym9">The symbol no. 9, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="sym10">The symbol no. 10, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="sym11">The symbol no. 11, to which the current non-terminal symbol gets reduced.</param>
        /// <returns>The newly created production rule.</returns>
        public ProductionWrapper<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T> AddProduction<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(SymbolWrapper<T0> sym0, SymbolWrapper<T1> sym1, SymbolWrapper<T2> sym2, SymbolWrapper<T3> sym3, SymbolWrapper<T4> sym4, SymbolWrapper<T5> sym5, SymbolWrapper<T6> sym6, SymbolWrapper<T7> sym7, SymbolWrapper<T8> sym8, SymbolWrapper<T9> sym9, SymbolWrapper<T10> sym10, SymbolWrapper<T11> sym11) =>
            new ProductionWrapper<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T>(((INonTerminal<object>)Symbol).AddProduction(sym0.Symbol, sym1.Symbol, sym2.Symbol, sym3.Symbol, sym4.Symbol, sym5.Symbol, sym6.Symbol, sym7.Symbol, sym8.Symbol, sym9.Symbol, sym10.Symbol, sym11.Symbol));

        /// <summary>
        /// Creates a new production rule on the current non-terminal symbol.
        /// <br/>
        /// This production represents the reducing of the current non-terminal to the 13 given symbols.
        /// </summary>
        /// <typeparam name="T0">The generic type of <paramref name="sym0"/>.</typeparam>
        /// <typeparam name="T1">The generic type of <paramref name="sym1"/>.</typeparam>
        /// <typeparam name="T2">The generic type of <paramref name="sym2"/>.</typeparam>
        /// <typeparam name="T3">The generic type of <paramref name="sym3"/>.</typeparam>
        /// <typeparam name="T4">The generic type of <paramref name="sym4"/>.</typeparam>
        /// <typeparam name="T5">The generic type of <paramref name="sym5"/>.</typeparam>
        /// <typeparam name="T6">The generic type of <paramref name="sym6"/>.</typeparam>
        /// <typeparam name="T7">The generic type of <paramref name="sym7"/>.</typeparam>
        /// <typeparam name="T8">The generic type of <paramref name="sym8"/>.</typeparam>
        /// <typeparam name="T9">The generic type of <paramref name="sym9"/>.</typeparam>
        /// <typeparam name="T10">The generic type of <paramref name="sym10"/>.</typeparam>
        /// <typeparam name="T11">The generic type of <paramref name="sym11"/>.</typeparam>
        /// <typeparam name="T12">The generic type of <paramref name="sym12"/>.</typeparam>
        /// <param name="sym0">The symbol no. 0, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="sym1">The symbol no. 1, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="sym2">The symbol no. 2, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="sym3">The symbol no. 3, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="sym4">The symbol no. 4, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="sym5">The symbol no. 5, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="sym6">The symbol no. 6, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="sym7">The symbol no. 7, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="sym8">The symbol no. 8, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="sym9">The symbol no. 9, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="sym10">The symbol no. 10, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="sym11">The symbol no. 11, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="sym12">The symbol no. 12, to which the current non-terminal symbol gets reduced.</param>
        /// <returns>The newly created production rule.</returns>
        public ProductionWrapper<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T> AddProduction<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(SymbolWrapper<T0> sym0, SymbolWrapper<T1> sym1, SymbolWrapper<T2> sym2, SymbolWrapper<T3> sym3, SymbolWrapper<T4> sym4, SymbolWrapper<T5> sym5, SymbolWrapper<T6> sym6, SymbolWrapper<T7> sym7, SymbolWrapper<T8> sym8, SymbolWrapper<T9> sym9, SymbolWrapper<T10> sym10, SymbolWrapper<T11> sym11, SymbolWrapper<T12> sym12) =>
            new ProductionWrapper<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T>(((INonTerminal<object>)Symbol).AddProduction(sym0.Symbol, sym1.Symbol, sym2.Symbol, sym3.Symbol, sym4.Symbol, sym5.Symbol, sym6.Symbol, sym7.Symbol, sym8.Symbol, sym9.Symbol, sym10.Symbol, sym11.Symbol, sym12.Symbol));

        /// <summary>
        /// Creates a new production rule on the current non-terminal symbol.
        /// <br/>
        /// This production represents the reducing of the current non-terminal to the 14 given symbols.
        /// </summary>
        /// <typeparam name="T0">The generic type of <paramref name="sym0"/>.</typeparam>
        /// <typeparam name="T1">The generic type of <paramref name="sym1"/>.</typeparam>
        /// <typeparam name="T2">The generic type of <paramref name="sym2"/>.</typeparam>
        /// <typeparam name="T3">The generic type of <paramref name="sym3"/>.</typeparam>
        /// <typeparam name="T4">The generic type of <paramref name="sym4"/>.</typeparam>
        /// <typeparam name="T5">The generic type of <paramref name="sym5"/>.</typeparam>
        /// <typeparam name="T6">The generic type of <paramref name="sym6"/>.</typeparam>
        /// <typeparam name="T7">The generic type of <paramref name="sym7"/>.</typeparam>
        /// <typeparam name="T8">The generic type of <paramref name="sym8"/>.</typeparam>
        /// <typeparam name="T9">The generic type of <paramref name="sym9"/>.</typeparam>
        /// <typeparam name="T10">The generic type of <paramref name="sym10"/>.</typeparam>
        /// <typeparam name="T11">The generic type of <paramref name="sym11"/>.</typeparam>
        /// <typeparam name="T12">The generic type of <paramref name="sym12"/>.</typeparam>
        /// <typeparam name="T13">The generic type of <paramref name="sym13"/>.</typeparam>
        /// <param name="sym0">The symbol no. 0, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="sym1">The symbol no. 1, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="sym2">The symbol no. 2, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="sym3">The symbol no. 3, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="sym4">The symbol no. 4, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="sym5">The symbol no. 5, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="sym6">The symbol no. 6, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="sym7">The symbol no. 7, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="sym8">The symbol no. 8, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="sym9">The symbol no. 9, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="sym10">The symbol no. 10, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="sym11">The symbol no. 11, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="sym12">The symbol no. 12, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="sym13">The symbol no. 13, to which the current non-terminal symbol gets reduced.</param>
        /// <returns>The newly created production rule.</returns>
        public ProductionWrapper<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T> AddProduction<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(SymbolWrapper<T0> sym0, SymbolWrapper<T1> sym1, SymbolWrapper<T2> sym2, SymbolWrapper<T3> sym3, SymbolWrapper<T4> sym4, SymbolWrapper<T5> sym5, SymbolWrapper<T6> sym6, SymbolWrapper<T7> sym7, SymbolWrapper<T8> sym8, SymbolWrapper<T9> sym9, SymbolWrapper<T10> sym10, SymbolWrapper<T11> sym11, SymbolWrapper<T12> sym12, SymbolWrapper<T13> sym13) =>
            new ProductionWrapper<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T>(((INonTerminal<object>)Symbol).AddProduction(sym0.Symbol, sym1.Symbol, sym2.Symbol, sym3.Symbol, sym4.Symbol, sym5.Symbol, sym6.Symbol, sym7.Symbol, sym8.Symbol, sym9.Symbol, sym10.Symbol, sym11.Symbol, sym12.Symbol, sym13.Symbol));

        /// <summary>
        /// Creates a new production rule on the current non-terminal symbol.
        /// <br/>
        /// This production represents the reducing of the current non-terminal to the 15 given symbols.
        /// </summary>
        /// <typeparam name="T0">The generic type of <paramref name="sym0"/>.</typeparam>
        /// <typeparam name="T1">The generic type of <paramref name="sym1"/>.</typeparam>
        /// <typeparam name="T2">The generic type of <paramref name="sym2"/>.</typeparam>
        /// <typeparam name="T3">The generic type of <paramref name="sym3"/>.</typeparam>
        /// <typeparam name="T4">The generic type of <paramref name="sym4"/>.</typeparam>
        /// <typeparam name="T5">The generic type of <paramref name="sym5"/>.</typeparam>
        /// <typeparam name="T6">The generic type of <paramref name="sym6"/>.</typeparam>
        /// <typeparam name="T7">The generic type of <paramref name="sym7"/>.</typeparam>
        /// <typeparam name="T8">The generic type of <paramref name="sym8"/>.</typeparam>
        /// <typeparam name="T9">The generic type of <paramref name="sym9"/>.</typeparam>
        /// <typeparam name="T10">The generic type of <paramref name="sym10"/>.</typeparam>
        /// <typeparam name="T11">The generic type of <paramref name="sym11"/>.</typeparam>
        /// <typeparam name="T12">The generic type of <paramref name="sym12"/>.</typeparam>
        /// <typeparam name="T13">The generic type of <paramref name="sym13"/>.</typeparam>
        /// <typeparam name="T14">The generic type of <paramref name="sym14"/>.</typeparam>
        /// <param name="sym0">The symbol no. 0, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="sym1">The symbol no. 1, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="sym2">The symbol no. 2, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="sym3">The symbol no. 3, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="sym4">The symbol no. 4, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="sym5">The symbol no. 5, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="sym6">The symbol no. 6, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="sym7">The symbol no. 7, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="sym8">The symbol no. 8, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="sym9">The symbol no. 9, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="sym10">The symbol no. 10, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="sym11">The symbol no. 11, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="sym12">The symbol no. 12, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="sym13">The symbol no. 13, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="sym14">The symbol no. 14, to which the current non-terminal symbol gets reduced.</param>
        /// <returns>The newly created production rule.</returns>
        public ProductionWrapper<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T> AddProduction<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(SymbolWrapper<T0> sym0, SymbolWrapper<T1> sym1, SymbolWrapper<T2> sym2, SymbolWrapper<T3> sym3, SymbolWrapper<T4> sym4, SymbolWrapper<T5> sym5, SymbolWrapper<T6> sym6, SymbolWrapper<T7> sym7, SymbolWrapper<T8> sym8, SymbolWrapper<T9> sym9, SymbolWrapper<T10> sym10, SymbolWrapper<T11> sym11, SymbolWrapper<T12> sym12, SymbolWrapper<T13> sym13, SymbolWrapper<T14> sym14) =>
            new ProductionWrapper<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T>(((INonTerminal<object>)Symbol).AddProduction(sym0.Symbol, sym1.Symbol, sym2.Symbol, sym3.Symbol, sym4.Symbol, sym5.Symbol, sym6.Symbol, sym7.Symbol, sym8.Symbol, sym9.Symbol, sym10.Symbol, sym11.Symbol, sym12.Symbol, sym13.Symbol, sym14.Symbol));

        /// <summary>
        /// Creates a new production rule on the current non-terminal symbol.
        /// <br/>
        /// This production represents the reducing of the current non-terminal to the 16 given symbols.
        /// </summary>
        /// <typeparam name="T0">The generic type of <paramref name="sym0"/>.</typeparam>
        /// <typeparam name="T1">The generic type of <paramref name="sym1"/>.</typeparam>
        /// <typeparam name="T2">The generic type of <paramref name="sym2"/>.</typeparam>
        /// <typeparam name="T3">The generic type of <paramref name="sym3"/>.</typeparam>
        /// <typeparam name="T4">The generic type of <paramref name="sym4"/>.</typeparam>
        /// <typeparam name="T5">The generic type of <paramref name="sym5"/>.</typeparam>
        /// <typeparam name="T6">The generic type of <paramref name="sym6"/>.</typeparam>
        /// <typeparam name="T7">The generic type of <paramref name="sym7"/>.</typeparam>
        /// <typeparam name="T8">The generic type of <paramref name="sym8"/>.</typeparam>
        /// <typeparam name="T9">The generic type of <paramref name="sym9"/>.</typeparam>
        /// <typeparam name="T10">The generic type of <paramref name="sym10"/>.</typeparam>
        /// <typeparam name="T11">The generic type of <paramref name="sym11"/>.</typeparam>
        /// <typeparam name="T12">The generic type of <paramref name="sym12"/>.</typeparam>
        /// <typeparam name="T13">The generic type of <paramref name="sym13"/>.</typeparam>
        /// <typeparam name="T14">The generic type of <paramref name="sym14"/>.</typeparam>
        /// <typeparam name="T15">The generic type of <paramref name="sym15"/>.</typeparam>
        /// <param name="sym0">The symbol no. 0, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="sym1">The symbol no. 1, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="sym2">The symbol no. 2, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="sym3">The symbol no. 3, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="sym4">The symbol no. 4, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="sym5">The symbol no. 5, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="sym6">The symbol no. 6, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="sym7">The symbol no. 7, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="sym8">The symbol no. 8, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="sym9">The symbol no. 9, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="sym10">The symbol no. 10, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="sym11">The symbol no. 11, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="sym12">The symbol no. 12, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="sym13">The symbol no. 13, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="sym14">The symbol no. 14, to which the current non-terminal symbol gets reduced.</param>
        /// <param name="sym15">The symbol no. 15, to which the current non-terminal symbol gets reduced.</param>
        /// <returns>The newly created production rule.</returns>
        public ProductionWrapper<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T> AddProduction<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(SymbolWrapper<T0> sym0, SymbolWrapper<T1> sym1, SymbolWrapper<T2> sym2, SymbolWrapper<T3> sym3, SymbolWrapper<T4> sym4, SymbolWrapper<T5> sym5, SymbolWrapper<T6> sym6, SymbolWrapper<T7> sym7, SymbolWrapper<T8> sym8, SymbolWrapper<T9> sym9, SymbolWrapper<T10> sym10, SymbolWrapper<T11> sym11, SymbolWrapper<T12> sym12, SymbolWrapper<T13> sym13, SymbolWrapper<T14> sym14, SymbolWrapper<T15> sym15) =>
            new ProductionWrapper<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T>(((INonTerminal<object>)Symbol).AddProduction(sym0.Symbol, sym1.Symbol, sym2.Symbol, sym3.Symbol, sym4.Symbol, sym5.Symbol, sym6.Symbol, sym7.Symbol, sym8.Symbol, sym9.Symbol, sym10.Symbol, sym11.Symbol, sym12.Symbol, sym13.Symbol, sym14.Symbol, sym15.Symbol));

    }

    /// <summary>
    /// Represents an abstract generic production wrapper.
    /// </summary>
    /// <typeparam name="T">The generic return type of the production. This is the type stored inside the non-terminal which gets reduced by the production represented by this wrapper.</typeparam>
    public abstract class ProductionWrapperBase<T>
        where T : ProductionWrapperBase<T>
    {
        /// <summary>
        /// The underlying (boxed) production of this wrapper.
        /// </summary>
        public IProduction<object> Production { get; }


        /// <summary>
        /// Creates a new abstract generic production wrapper based on the given (boxed) production.
        /// </summary>
        /// <param name="production">Boxed production instance.</param>
        public ProductionWrapperBase(IProduction<object> production) => Production = production;

        /// <summary>
        /// Configures the production to reduce the non-terminal to the first symbol. This is equivalent to <see cref="IProduction{T}.SetReduceToIndex(int)"/> with the index 0.
        /// </summary>
        /// <returns>The current instance.</returns>
        public T SetReduceToFirst()
        {
            Production.SetReduceToFirst();

            return (T)this;
        }

        /// <summary>
        /// Sets given precedence group to the current production.
        /// </summary>
        /// <param name="precedence">Precedence group to the assigned to the current production.</param>
        /// <returns>The current instance.</returns>
        public T SetPrecedence(IPrecedenceGroup precedence)
        {
            Production.SetPrecedence(precedence);

            return (T)this;
        }
    }

    /// <summary>
    /// Represents a generic reduce function of the type "<c>(R) -&gt; <typeparamref name="R"/></c>".
    /// </summary>
    /// <inheritdoc/>
    /// <typeparam name="R">The generic return type of the production.</typeparam>
    public sealed class ProductionWrapper<R>
        : ProductionWrapperBase<ProductionWrapper<R>>
    {
        /// <summary>
        /// Creates a new generic production wrapper based on the given (boxed) production.
        /// </summary>
        /// <inheritdoc/>
        /// <param name="production">Boxed production instance.</param>
        public ProductionWrapper(IProduction<object> production)
            : base(production)
        {
        }

        public ProductionWrapper<R> SetReduceFunction(Func<R> f)
        {
            Production.SetReduceFunction(args => f());

            return this;
        }
    }

    /// <summary>
    /// Represents a generic reduce function of the type "<c>(T0, R) -&gt; <typeparamref name="R"/></c>".
    /// </summary>
    /// <inheritdoc/>
    /// <typeparam name="T0">The generic input type of the symbol no. 0.</typeparam>
    /// <typeparam name="R">The generic return type of the production.</typeparam>
    public sealed class ProductionWrapper<T0, R>
        : ProductionWrapperBase<ProductionWrapper<T0, R>>
    {
        /// <summary>
        /// Creates a new generic production wrapper based on the given (boxed) production.
        /// </summary>
        /// <inheritdoc/>
        /// <param name="production">Boxed production instance.</param>
        public ProductionWrapper(IProduction<object> production)
            : base(production)
        {
        }

        public ProductionWrapper<T0, R> SetReduceFunction(Func<T0, R> f)
        {
            Production.SetReduceFunction(args => f((T0)args[0]));

            return this;
        }
    }

    /// <summary>
    /// Represents a generic reduce function of the type "<c>(T0, T1, R) -&gt; <typeparamref name="R"/></c>".
    /// </summary>
    /// <inheritdoc/>
    /// <typeparam name="T0">The generic input type of the symbol no. 0.</typeparam>
    /// <typeparam name="T1">The generic input type of the symbol no. 1.</typeparam>
    /// <typeparam name="R">The generic return type of the production.</typeparam>
    public sealed class ProductionWrapper<T0, T1, R>
        : ProductionWrapperBase<ProductionWrapper<T0, T1, R>>
    {
        /// <summary>
        /// Creates a new generic production wrapper based on the given (boxed) production.
        /// </summary>
        /// <inheritdoc/>
        /// <param name="production">Boxed production instance.</param>
        public ProductionWrapper(IProduction<object> production)
            : base(production)
        {
        }

        public ProductionWrapper<T0, T1, R> SetReduceFunction(Func<T0, T1, R> f)
        {
            Production.SetReduceFunction(args => f((T0)args[0], (T1)args[1]));

            return this;
        }
    }

    /// <summary>
    /// Represents a generic reduce function of the type "<c>(T0, T1, T2, R) -&gt; <typeparamref name="R"/></c>".
    /// </summary>
    /// <inheritdoc/>
    /// <typeparam name="T0">The generic input type of the symbol no. 0.</typeparam>
    /// <typeparam name="T1">The generic input type of the symbol no. 1.</typeparam>
    /// <typeparam name="T2">The generic input type of the symbol no. 2.</typeparam>
    /// <typeparam name="R">The generic return type of the production.</typeparam>
    public sealed class ProductionWrapper<T0, T1, T2, R>
        : ProductionWrapperBase<ProductionWrapper<T0, T1, T2, R>>
    {
        /// <summary>
        /// Creates a new generic production wrapper based on the given (boxed) production.
        /// </summary>
        /// <inheritdoc/>
        /// <param name="production">Boxed production instance.</param>
        public ProductionWrapper(IProduction<object> production)
            : base(production)
        {
        }

        public ProductionWrapper<T0, T1, T2, R> SetReduceFunction(Func<T0, T1, T2, R> f)
        {
            Production.SetReduceFunction(args => f((T0)args[0], (T1)args[1], (T2)args[2]));

            return this;
        }
    }

    /// <summary>
    /// Represents a generic reduce function of the type "<c>(T0, T1, T2, T3, R) -&gt; <typeparamref name="R"/></c>".
    /// </summary>
    /// <inheritdoc/>
    /// <typeparam name="T0">The generic input type of the symbol no. 0.</typeparam>
    /// <typeparam name="T1">The generic input type of the symbol no. 1.</typeparam>
    /// <typeparam name="T2">The generic input type of the symbol no. 2.</typeparam>
    /// <typeparam name="T3">The generic input type of the symbol no. 3.</typeparam>
    /// <typeparam name="R">The generic return type of the production.</typeparam>
    public sealed class ProductionWrapper<T0, T1, T2, T3, R>
        : ProductionWrapperBase<ProductionWrapper<T0, T1, T2, T3, R>>
    {
        /// <summary>
        /// Creates a new generic production wrapper based on the given (boxed) production.
        /// </summary>
        /// <inheritdoc/>
        /// <param name="production">Boxed production instance.</param>
        public ProductionWrapper(IProduction<object> production)
            : base(production)
        {
        }

        public ProductionWrapper<T0, T1, T2, T3, R> SetReduceFunction(Func<T0, T1, T2, T3, R> f)
        {
            Production.SetReduceFunction(args => f((T0)args[0], (T1)args[1], (T2)args[2], (T3)args[3]));

            return this;
        }
    }

    /// <summary>
    /// Represents a generic reduce function of the type "<c>(T0, T1, T2, T3, T4, R) -&gt; <typeparamref name="R"/></c>".
    /// </summary>
    /// <inheritdoc/>
    /// <typeparam name="T0">The generic input type of the symbol no. 0.</typeparam>
    /// <typeparam name="T1">The generic input type of the symbol no. 1.</typeparam>
    /// <typeparam name="T2">The generic input type of the symbol no. 2.</typeparam>
    /// <typeparam name="T3">The generic input type of the symbol no. 3.</typeparam>
    /// <typeparam name="T4">The generic input type of the symbol no. 4.</typeparam>
    /// <typeparam name="R">The generic return type of the production.</typeparam>
    public sealed class ProductionWrapper<T0, T1, T2, T3, T4, R>
        : ProductionWrapperBase<ProductionWrapper<T0, T1, T2, T3, T4, R>>
    {
        /// <summary>
        /// Creates a new generic production wrapper based on the given (boxed) production.
        /// </summary>
        /// <inheritdoc/>
        /// <param name="production">Boxed production instance.</param>
        public ProductionWrapper(IProduction<object> production)
            : base(production)
        {
        }

        public ProductionWrapper<T0, T1, T2, T3, T4, R> SetReduceFunction(Func<T0, T1, T2, T3, T4, R> f)
        {
            Production.SetReduceFunction(args => f((T0)args[0], (T1)args[1], (T2)args[2], (T3)args[3], (T4)args[4]));

            return this;
        }
    }

    /// <summary>
    /// Represents a generic reduce function of the type "<c>(T0, T1, T2, T3, T4, T5, R) -&gt; <typeparamref name="R"/></c>".
    /// </summary>
    /// <inheritdoc/>
    /// <typeparam name="T0">The generic input type of the symbol no. 0.</typeparam>
    /// <typeparam name="T1">The generic input type of the symbol no. 1.</typeparam>
    /// <typeparam name="T2">The generic input type of the symbol no. 2.</typeparam>
    /// <typeparam name="T3">The generic input type of the symbol no. 3.</typeparam>
    /// <typeparam name="T4">The generic input type of the symbol no. 4.</typeparam>
    /// <typeparam name="T5">The generic input type of the symbol no. 5.</typeparam>
    /// <typeparam name="R">The generic return type of the production.</typeparam>
    public sealed class ProductionWrapper<T0, T1, T2, T3, T4, T5, R>
        : ProductionWrapperBase<ProductionWrapper<T0, T1, T2, T3, T4, T5, R>>
    {
        /// <summary>
        /// Creates a new generic production wrapper based on the given (boxed) production.
        /// </summary>
        /// <inheritdoc/>
        /// <param name="production">Boxed production instance.</param>
        public ProductionWrapper(IProduction<object> production)
            : base(production)
        {
        }

        public ProductionWrapper<T0, T1, T2, T3, T4, T5, R> SetReduceFunction(Func<T0, T1, T2, T3, T4, T5, R> f)
        {
            Production.SetReduceFunction(args => f((T0)args[0], (T1)args[1], (T2)args[2], (T3)args[3], (T4)args[4], (T5)args[5]));

            return this;
        }
    }

    /// <summary>
    /// Represents a generic reduce function of the type "<c>(T0, T1, T2, T3, T4, T5, T6, R) -&gt; <typeparamref name="R"/></c>".
    /// </summary>
    /// <inheritdoc/>
    /// <typeparam name="T0">The generic input type of the symbol no. 0.</typeparam>
    /// <typeparam name="T1">The generic input type of the symbol no. 1.</typeparam>
    /// <typeparam name="T2">The generic input type of the symbol no. 2.</typeparam>
    /// <typeparam name="T3">The generic input type of the symbol no. 3.</typeparam>
    /// <typeparam name="T4">The generic input type of the symbol no. 4.</typeparam>
    /// <typeparam name="T5">The generic input type of the symbol no. 5.</typeparam>
    /// <typeparam name="T6">The generic input type of the symbol no. 6.</typeparam>
    /// <typeparam name="R">The generic return type of the production.</typeparam>
    public sealed class ProductionWrapper<T0, T1, T2, T3, T4, T5, T6, R>
        : ProductionWrapperBase<ProductionWrapper<T0, T1, T2, T3, T4, T5, T6, R>>
    {
        /// <summary>
        /// Creates a new generic production wrapper based on the given (boxed) production.
        /// </summary>
        /// <inheritdoc/>
        /// <param name="production">Boxed production instance.</param>
        public ProductionWrapper(IProduction<object> production)
            : base(production)
        {
        }

        public ProductionWrapper<T0, T1, T2, T3, T4, T5, T6, R> SetReduceFunction(Func<T0, T1, T2, T3, T4, T5, T6, R> f)
        {
            Production.SetReduceFunction(args => f((T0)args[0], (T1)args[1], (T2)args[2], (T3)args[3], (T4)args[4], (T5)args[5], (T6)args[6]));

            return this;
        }
    }

    /// <summary>
    /// Represents a generic reduce function of the type "<c>(T0, T1, T2, T3, T4, T5, T6, T7, R) -&gt; <typeparamref name="R"/></c>".
    /// </summary>
    /// <inheritdoc/>
    /// <typeparam name="T0">The generic input type of the symbol no. 0.</typeparam>
    /// <typeparam name="T1">The generic input type of the symbol no. 1.</typeparam>
    /// <typeparam name="T2">The generic input type of the symbol no. 2.</typeparam>
    /// <typeparam name="T3">The generic input type of the symbol no. 3.</typeparam>
    /// <typeparam name="T4">The generic input type of the symbol no. 4.</typeparam>
    /// <typeparam name="T5">The generic input type of the symbol no. 5.</typeparam>
    /// <typeparam name="T6">The generic input type of the symbol no. 6.</typeparam>
    /// <typeparam name="T7">The generic input type of the symbol no. 7.</typeparam>
    /// <typeparam name="R">The generic return type of the production.</typeparam>
    public sealed class ProductionWrapper<T0, T1, T2, T3, T4, T5, T6, T7, R>
        : ProductionWrapperBase<ProductionWrapper<T0, T1, T2, T3, T4, T5, T6, T7, R>>
    {
        /// <summary>
        /// Creates a new generic production wrapper based on the given (boxed) production.
        /// </summary>
        /// <inheritdoc/>
        /// <param name="production">Boxed production instance.</param>
        public ProductionWrapper(IProduction<object> production)
            : base(production)
        {
        }

        public ProductionWrapper<T0, T1, T2, T3, T4, T5, T6, T7, R> SetReduceFunction(Func<T0, T1, T2, T3, T4, T5, T6, T7, R> f)
        {
            Production.SetReduceFunction(args => f((T0)args[0], (T1)args[1], (T2)args[2], (T3)args[3], (T4)args[4], (T5)args[5], (T6)args[6], (T7)args[7]));

            return this;
        }
    }

    /// <summary>
    /// Represents a generic reduce function of the type "<c>(T0, T1, T2, T3, T4, T5, T6, T7, T8, R) -&gt; <typeparamref name="R"/></c>".
    /// </summary>
    /// <inheritdoc/>
    /// <typeparam name="T0">The generic input type of the symbol no. 0.</typeparam>
    /// <typeparam name="T1">The generic input type of the symbol no. 1.</typeparam>
    /// <typeparam name="T2">The generic input type of the symbol no. 2.</typeparam>
    /// <typeparam name="T3">The generic input type of the symbol no. 3.</typeparam>
    /// <typeparam name="T4">The generic input type of the symbol no. 4.</typeparam>
    /// <typeparam name="T5">The generic input type of the symbol no. 5.</typeparam>
    /// <typeparam name="T6">The generic input type of the symbol no. 6.</typeparam>
    /// <typeparam name="T7">The generic input type of the symbol no. 7.</typeparam>
    /// <typeparam name="T8">The generic input type of the symbol no. 8.</typeparam>
    /// <typeparam name="R">The generic return type of the production.</typeparam>
    public sealed class ProductionWrapper<T0, T1, T2, T3, T4, T5, T6, T7, T8, R>
        : ProductionWrapperBase<ProductionWrapper<T0, T1, T2, T3, T4, T5, T6, T7, T8, R>>
    {
        /// <summary>
        /// Creates a new generic production wrapper based on the given (boxed) production.
        /// </summary>
        /// <inheritdoc/>
        /// <param name="production">Boxed production instance.</param>
        public ProductionWrapper(IProduction<object> production)
            : base(production)
        {
        }

        public ProductionWrapper<T0, T1, T2, T3, T4, T5, T6, T7, T8, R> SetReduceFunction(Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, R> f)
        {
            Production.SetReduceFunction(args => f((T0)args[0], (T1)args[1], (T2)args[2], (T3)args[3], (T4)args[4], (T5)args[5], (T6)args[6], (T7)args[7], (T8)args[8]));

            return this;
        }
    }

    /// <summary>
    /// Represents a generic reduce function of the type "<c>(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, R) -&gt; <typeparamref name="R"/></c>".
    /// </summary>
    /// <inheritdoc/>
    /// <typeparam name="T0">The generic input type of the symbol no. 0.</typeparam>
    /// <typeparam name="T1">The generic input type of the symbol no. 1.</typeparam>
    /// <typeparam name="T2">The generic input type of the symbol no. 2.</typeparam>
    /// <typeparam name="T3">The generic input type of the symbol no. 3.</typeparam>
    /// <typeparam name="T4">The generic input type of the symbol no. 4.</typeparam>
    /// <typeparam name="T5">The generic input type of the symbol no. 5.</typeparam>
    /// <typeparam name="T6">The generic input type of the symbol no. 6.</typeparam>
    /// <typeparam name="T7">The generic input type of the symbol no. 7.</typeparam>
    /// <typeparam name="T8">The generic input type of the symbol no. 8.</typeparam>
    /// <typeparam name="T9">The generic input type of the symbol no. 9.</typeparam>
    /// <typeparam name="R">The generic return type of the production.</typeparam>
    public sealed class ProductionWrapper<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, R>
        : ProductionWrapperBase<ProductionWrapper<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, R>>
    {
        /// <summary>
        /// Creates a new generic production wrapper based on the given (boxed) production.
        /// </summary>
        /// <inheritdoc/>
        /// <param name="production">Boxed production instance.</param>
        public ProductionWrapper(IProduction<object> production)
            : base(production)
        {
        }

        public ProductionWrapper<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, R> SetReduceFunction(Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, R> f)
        {
            Production.SetReduceFunction(args => f((T0)args[0], (T1)args[1], (T2)args[2], (T3)args[3], (T4)args[4], (T5)args[5], (T6)args[6], (T7)args[7], (T8)args[8], (T9)args[9]));

            return this;
        }
    }

    /// <summary>
    /// Represents a generic reduce function of the type "<c>(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, R) -&gt; <typeparamref name="R"/></c>".
    /// </summary>
    /// <inheritdoc/>
    /// <typeparam name="T0">The generic input type of the symbol no. 0.</typeparam>
    /// <typeparam name="T1">The generic input type of the symbol no. 1.</typeparam>
    /// <typeparam name="T2">The generic input type of the symbol no. 2.</typeparam>
    /// <typeparam name="T3">The generic input type of the symbol no. 3.</typeparam>
    /// <typeparam name="T4">The generic input type of the symbol no. 4.</typeparam>
    /// <typeparam name="T5">The generic input type of the symbol no. 5.</typeparam>
    /// <typeparam name="T6">The generic input type of the symbol no. 6.</typeparam>
    /// <typeparam name="T7">The generic input type of the symbol no. 7.</typeparam>
    /// <typeparam name="T8">The generic input type of the symbol no. 8.</typeparam>
    /// <typeparam name="T9">The generic input type of the symbol no. 9.</typeparam>
    /// <typeparam name="T10">The generic input type of the symbol no. 10.</typeparam>
    /// <typeparam name="R">The generic return type of the production.</typeparam>
    public sealed class ProductionWrapper<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, R>
        : ProductionWrapperBase<ProductionWrapper<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, R>>
    {
        /// <summary>
        /// Creates a new generic production wrapper based on the given (boxed) production.
        /// </summary>
        /// <inheritdoc/>
        /// <param name="production">Boxed production instance.</param>
        public ProductionWrapper(IProduction<object> production)
            : base(production)
        {
        }

        public ProductionWrapper<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, R> SetReduceFunction(Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, R> f)
        {
            Production.SetReduceFunction(args => f((T0)args[0], (T1)args[1], (T2)args[2], (T3)args[3], (T4)args[4], (T5)args[5], (T6)args[6], (T7)args[7], (T8)args[8], (T9)args[9], (T10)args[10]));

            return this;
        }
    }

    /// <summary>
    /// Represents a generic reduce function of the type "<c>(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, R) -&gt; <typeparamref name="R"/></c>".
    /// </summary>
    /// <inheritdoc/>
    /// <typeparam name="T0">The generic input type of the symbol no. 0.</typeparam>
    /// <typeparam name="T1">The generic input type of the symbol no. 1.</typeparam>
    /// <typeparam name="T2">The generic input type of the symbol no. 2.</typeparam>
    /// <typeparam name="T3">The generic input type of the symbol no. 3.</typeparam>
    /// <typeparam name="T4">The generic input type of the symbol no. 4.</typeparam>
    /// <typeparam name="T5">The generic input type of the symbol no. 5.</typeparam>
    /// <typeparam name="T6">The generic input type of the symbol no. 6.</typeparam>
    /// <typeparam name="T7">The generic input type of the symbol no. 7.</typeparam>
    /// <typeparam name="T8">The generic input type of the symbol no. 8.</typeparam>
    /// <typeparam name="T9">The generic input type of the symbol no. 9.</typeparam>
    /// <typeparam name="T10">The generic input type of the symbol no. 10.</typeparam>
    /// <typeparam name="T11">The generic input type of the symbol no. 11.</typeparam>
    /// <typeparam name="R">The generic return type of the production.</typeparam>
    public sealed class ProductionWrapper<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, R>
        : ProductionWrapperBase<ProductionWrapper<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, R>>
    {
        /// <summary>
        /// Creates a new generic production wrapper based on the given (boxed) production.
        /// </summary>
        /// <inheritdoc/>
        /// <param name="production">Boxed production instance.</param>
        public ProductionWrapper(IProduction<object> production)
            : base(production)
        {
        }

        public ProductionWrapper<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, R> SetReduceFunction(Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, R> f)
        {
            Production.SetReduceFunction(args => f((T0)args[0], (T1)args[1], (T2)args[2], (T3)args[3], (T4)args[4], (T5)args[5], (T6)args[6], (T7)args[7], (T8)args[8], (T9)args[9], (T10)args[10], (T11)args[11]));

            return this;
        }
    }

    /// <summary>
    /// Represents a generic reduce function of the type "<c>(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, R) -&gt; <typeparamref name="R"/></c>".
    /// </summary>
    /// <inheritdoc/>
    /// <typeparam name="T0">The generic input type of the symbol no. 0.</typeparam>
    /// <typeparam name="T1">The generic input type of the symbol no. 1.</typeparam>
    /// <typeparam name="T2">The generic input type of the symbol no. 2.</typeparam>
    /// <typeparam name="T3">The generic input type of the symbol no. 3.</typeparam>
    /// <typeparam name="T4">The generic input type of the symbol no. 4.</typeparam>
    /// <typeparam name="T5">The generic input type of the symbol no. 5.</typeparam>
    /// <typeparam name="T6">The generic input type of the symbol no. 6.</typeparam>
    /// <typeparam name="T7">The generic input type of the symbol no. 7.</typeparam>
    /// <typeparam name="T8">The generic input type of the symbol no. 8.</typeparam>
    /// <typeparam name="T9">The generic input type of the symbol no. 9.</typeparam>
    /// <typeparam name="T10">The generic input type of the symbol no. 10.</typeparam>
    /// <typeparam name="T11">The generic input type of the symbol no. 11.</typeparam>
    /// <typeparam name="T12">The generic input type of the symbol no. 12.</typeparam>
    /// <typeparam name="R">The generic return type of the production.</typeparam>
    public sealed class ProductionWrapper<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, R>
        : ProductionWrapperBase<ProductionWrapper<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, R>>
    {
        /// <summary>
        /// Creates a new generic production wrapper based on the given (boxed) production.
        /// </summary>
        /// <inheritdoc/>
        /// <param name="production">Boxed production instance.</param>
        public ProductionWrapper(IProduction<object> production)
            : base(production)
        {
        }

        public ProductionWrapper<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, R> SetReduceFunction(Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, R> f)
        {
            Production.SetReduceFunction(args => f((T0)args[0], (T1)args[1], (T2)args[2], (T3)args[3], (T4)args[4], (T5)args[5], (T6)args[6], (T7)args[7], (T8)args[8], (T9)args[9], (T10)args[10], (T11)args[11], (T12)args[12]));

            return this;
        }
    }

    /// <summary>
    /// Represents a generic reduce function of the type "<c>(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, R) -&gt; <typeparamref name="R"/></c>".
    /// </summary>
    /// <inheritdoc/>
    /// <typeparam name="T0">The generic input type of the symbol no. 0.</typeparam>
    /// <typeparam name="T1">The generic input type of the symbol no. 1.</typeparam>
    /// <typeparam name="T2">The generic input type of the symbol no. 2.</typeparam>
    /// <typeparam name="T3">The generic input type of the symbol no. 3.</typeparam>
    /// <typeparam name="T4">The generic input type of the symbol no. 4.</typeparam>
    /// <typeparam name="T5">The generic input type of the symbol no. 5.</typeparam>
    /// <typeparam name="T6">The generic input type of the symbol no. 6.</typeparam>
    /// <typeparam name="T7">The generic input type of the symbol no. 7.</typeparam>
    /// <typeparam name="T8">The generic input type of the symbol no. 8.</typeparam>
    /// <typeparam name="T9">The generic input type of the symbol no. 9.</typeparam>
    /// <typeparam name="T10">The generic input type of the symbol no. 10.</typeparam>
    /// <typeparam name="T11">The generic input type of the symbol no. 11.</typeparam>
    /// <typeparam name="T12">The generic input type of the symbol no. 12.</typeparam>
    /// <typeparam name="T13">The generic input type of the symbol no. 13.</typeparam>
    /// <typeparam name="R">The generic return type of the production.</typeparam>
    public sealed class ProductionWrapper<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, R>
        : ProductionWrapperBase<ProductionWrapper<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, R>>
    {
        /// <summary>
        /// Creates a new generic production wrapper based on the given (boxed) production.
        /// </summary>
        /// <inheritdoc/>
        /// <param name="production">Boxed production instance.</param>
        public ProductionWrapper(IProduction<object> production)
            : base(production)
        {
        }

        public ProductionWrapper<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, R> SetReduceFunction(Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, R> f)
        {
            Production.SetReduceFunction(args => f((T0)args[0], (T1)args[1], (T2)args[2], (T3)args[3], (T4)args[4], (T5)args[5], (T6)args[6], (T7)args[7], (T8)args[8], (T9)args[9], (T10)args[10], (T11)args[11], (T12)args[12], (T13)args[13]));

            return this;
        }
    }

    /// <summary>
    /// Represents a generic reduce function of the type "<c>(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, R) -&gt; <typeparamref name="R"/></c>".
    /// </summary>
    /// <inheritdoc/>
    /// <typeparam name="T0">The generic input type of the symbol no. 0.</typeparam>
    /// <typeparam name="T1">The generic input type of the symbol no. 1.</typeparam>
    /// <typeparam name="T2">The generic input type of the symbol no. 2.</typeparam>
    /// <typeparam name="T3">The generic input type of the symbol no. 3.</typeparam>
    /// <typeparam name="T4">The generic input type of the symbol no. 4.</typeparam>
    /// <typeparam name="T5">The generic input type of the symbol no. 5.</typeparam>
    /// <typeparam name="T6">The generic input type of the symbol no. 6.</typeparam>
    /// <typeparam name="T7">The generic input type of the symbol no. 7.</typeparam>
    /// <typeparam name="T8">The generic input type of the symbol no. 8.</typeparam>
    /// <typeparam name="T9">The generic input type of the symbol no. 9.</typeparam>
    /// <typeparam name="T10">The generic input type of the symbol no. 10.</typeparam>
    /// <typeparam name="T11">The generic input type of the symbol no. 11.</typeparam>
    /// <typeparam name="T12">The generic input type of the symbol no. 12.</typeparam>
    /// <typeparam name="T13">The generic input type of the symbol no. 13.</typeparam>
    /// <typeparam name="T14">The generic input type of the symbol no. 14.</typeparam>
    /// <typeparam name="R">The generic return type of the production.</typeparam>
    public sealed class ProductionWrapper<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, R>
        : ProductionWrapperBase<ProductionWrapper<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, R>>
    {
        /// <summary>
        /// Creates a new generic production wrapper based on the given (boxed) production.
        /// </summary>
        /// <inheritdoc/>
        /// <param name="production">Boxed production instance.</param>
        public ProductionWrapper(IProduction<object> production)
            : base(production)
        {
        }

        public ProductionWrapper<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, R> SetReduceFunction(Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, R> f)
        {
            Production.SetReduceFunction(args => f((T0)args[0], (T1)args[1], (T2)args[2], (T3)args[3], (T4)args[4], (T5)args[5], (T6)args[6], (T7)args[7], (T8)args[8], (T9)args[9], (T10)args[10], (T11)args[11], (T12)args[12], (T13)args[13], (T14)args[14]));

            return this;
        }
    }

    /// <summary>
    /// Represents a generic reduce function of the type "<c>(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, R) -&gt; <typeparamref name="R"/></c>".
    /// </summary>
    /// <inheritdoc/>
    /// <typeparam name="T0">The generic input type of the symbol no. 0.</typeparam>
    /// <typeparam name="T1">The generic input type of the symbol no. 1.</typeparam>
    /// <typeparam name="T2">The generic input type of the symbol no. 2.</typeparam>
    /// <typeparam name="T3">The generic input type of the symbol no. 3.</typeparam>
    /// <typeparam name="T4">The generic input type of the symbol no. 4.</typeparam>
    /// <typeparam name="T5">The generic input type of the symbol no. 5.</typeparam>
    /// <typeparam name="T6">The generic input type of the symbol no. 6.</typeparam>
    /// <typeparam name="T7">The generic input type of the symbol no. 7.</typeparam>
    /// <typeparam name="T8">The generic input type of the symbol no. 8.</typeparam>
    /// <typeparam name="T9">The generic input type of the symbol no. 9.</typeparam>
    /// <typeparam name="T10">The generic input type of the symbol no. 10.</typeparam>
    /// <typeparam name="T11">The generic input type of the symbol no. 11.</typeparam>
    /// <typeparam name="T12">The generic input type of the symbol no. 12.</typeparam>
    /// <typeparam name="T13">The generic input type of the symbol no. 13.</typeparam>
    /// <typeparam name="T14">The generic input type of the symbol no. 14.</typeparam>
    /// <typeparam name="T15">The generic input type of the symbol no. 15.</typeparam>
    /// <typeparam name="R">The generic return type of the production.</typeparam>
    public sealed class ProductionWrapper<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, R>
        : ProductionWrapperBase<ProductionWrapper<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, R>>
    {
        /// <summary>
        /// Creates a new generic production wrapper based on the given (boxed) production.
        /// </summary>
        /// <inheritdoc/>
        /// <param name="production">Boxed production instance.</param>
        public ProductionWrapper(IProduction<object> production)
            : base(production)
        {
        }

        public ProductionWrapper<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, R> SetReduceFunction(Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, R> f)
        {
            Production.SetReduceFunction(args => f((T0)args[0], (T1)args[1], (T2)args[2], (T3)args[3], (T4)args[4], (T5)args[5], (T6)args[6], (T7)args[7], (T8)args[8], (T9)args[9], (T10)args[10], (T11)args[11], (T12)args[12], (T13)args[13], (T14)args[14], (T15)args[15]));

            return this;
        }
    }
}
