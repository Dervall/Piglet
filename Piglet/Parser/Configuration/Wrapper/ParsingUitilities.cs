///////////////////////////////////////////////////////////////////////
//             AUTOGENERATED 2019-09-29 09:32:45.933182              //
//   All your changes to this file will be lost upon re-generation.  //
///////////////////////////////////////////////////////////////////////

using System.Collections.Generic;
using System.Linq;
using System;

using Piglet.Parser.Construction;


namespace Piglet.Parser.Configuration.Wrapper
{
    public abstract class LexerConstructor
    {
        public IParserConfigurator<object> Configurator { get; }
        private int _ntcounter = 0;


        public LexerConstructor()
            : this(ParserFactory.Configure<object>())
        {
        }

        public LexerConstructor(IParserConfigurator<object> configurator)
        {
        }

        public NonTerminalWrapper<T> CreateNonTerminal<T>()
        {
            lock (this)
                return new NonTerminalWrapper<T>(Configurator.CreateNonTerminal($"NT{++_ntcounter}"));
        }

        public TerminalWrapper<T> CreateTerminal<T>(string regex, Func<string, T> func) => new TerminalWrapper<T>(Configurator.CreateTerminal(regex, s => func(s)));

        public TerminalWrapper<string> CreateTerminal<T>(string regex) => new TerminalWrapper<string>(Configurator.CreateTerminal(regex));

        public void SetAssociativity(AssociativityDirection dir, params ITerminalWrapper[] symbol)
        {
            ITerminal<object>[] arr = symbol.Select(s => s.Symbol).ToArray();

            if (dir == AssociativityDirection.Left)
                Configurator.LeftAssociative(arr);
            else if (dir == AssociativityDirection.Right)
                Configurator.RightAssociative(arr);
        }

        public void CreateProduction<T, S0>(NonTerminalWrapper<T> to, SymbolWrapper<S0> s) => to.AddProduction(s).SetReduceToFirst();

        public void CreateProduction<T>(NonTerminalWrapper<T> to, Func<T> func) => to.AddProduction().SetReduceFunction(func);

        public void CreateProduction<T, S0>(NonTerminalWrapper<T> to, SymbolWrapper<S0> s0, Func<S0, T> func) => to.AddProduction(s0).SetReduceFunction(func);

        public void CreateProduction<T, S0, S1>(NonTerminalWrapper<T> to, SymbolWrapper<S0> s0, SymbolWrapper<S1> s1, Func<S0, S1, T> func) => to.AddProduction(s0, s1).SetReduceFunction(func);

        public void CreateProduction<T, S0, S1, S2>(NonTerminalWrapper<T> to, SymbolWrapper<S0> s0, SymbolWrapper<S1> s1, SymbolWrapper<S2> s2, Func<S0, S1, S2, T> func) => to.AddProduction(s0, s1, s2).SetReduceFunction(func);

        public void CreateProduction<T, S0, S1, S2, S3>(NonTerminalWrapper<T> to, SymbolWrapper<S0> s0, SymbolWrapper<S1> s1, SymbolWrapper<S2> s2, SymbolWrapper<S3> s3, Func<S0, S1, S2, S3, T> func) => to.AddProduction(s0, s1, s2, s3).SetReduceFunction(func);

        public void CreateProduction<T, S0, S1, S2, S3, S4>(NonTerminalWrapper<T> to, SymbolWrapper<S0> s0, SymbolWrapper<S1> s1, SymbolWrapper<S2> s2, SymbolWrapper<S3> s3, SymbolWrapper<S4> s4, Func<S0, S1, S2, S3, S4, T> func) => to.AddProduction(s0, s1, s2, s3, s4).SetReduceFunction(func);

        public void CreateProduction<T, S0, S1, S2, S3, S4, S5>(NonTerminalWrapper<T> to, SymbolWrapper<S0> s0, SymbolWrapper<S1> s1, SymbolWrapper<S2> s2, SymbolWrapper<S3> s3, SymbolWrapper<S4> s4, SymbolWrapper<S5> s5, Func<S0, S1, S2, S3, S4, S5, T> func) => to.AddProduction(s0, s1, s2, s3, s4, s5).SetReduceFunction(func);

        public void CreateProduction<T, S0, S1, S2, S3, S4, S5, S6>(NonTerminalWrapper<T> to, SymbolWrapper<S0> s0, SymbolWrapper<S1> s1, SymbolWrapper<S2> s2, SymbolWrapper<S3> s3, SymbolWrapper<S4> s4, SymbolWrapper<S5> s5, SymbolWrapper<S6> s6, Func<S0, S1, S2, S3, S4, S5, S6, T> func) => to.AddProduction(s0, s1, s2, s3, s4, s5, s6).SetReduceFunction(func);

        public void CreateProduction<T, S0, S1, S2, S3, S4, S5, S6, S7>(NonTerminalWrapper<T> to, SymbolWrapper<S0> s0, SymbolWrapper<S1> s1, SymbolWrapper<S2> s2, SymbolWrapper<S3> s3, SymbolWrapper<S4> s4, SymbolWrapper<S5> s5, SymbolWrapper<S6> s6, SymbolWrapper<S7> s7, Func<S0, S1, S2, S3, S4, S5, S6, S7, T> func) => to.AddProduction(s0, s1, s2, s3, s4, s5, s6, s7).SetReduceFunction(func);

        public void CreateProduction<T, S0, S1, S2, S3, S4, S5, S6, S7, S8>(NonTerminalWrapper<T> to, SymbolWrapper<S0> s0, SymbolWrapper<S1> s1, SymbolWrapper<S2> s2, SymbolWrapper<S3> s3, SymbolWrapper<S4> s4, SymbolWrapper<S5> s5, SymbolWrapper<S6> s6, SymbolWrapper<S7> s7, SymbolWrapper<S8> s8, Func<S0, S1, S2, S3, S4, S5, S6, S7, S8, T> func) => to.AddProduction(s0, s1, s2, s3, s4, s5, s6, s7, s8).SetReduceFunction(func);

        public void CreateProduction<T, S0, S1, S2, S3, S4, S5, S6, S7, S8, S9>(NonTerminalWrapper<T> to, SymbolWrapper<S0> s0, SymbolWrapper<S1> s1, SymbolWrapper<S2> s2, SymbolWrapper<S3> s3, SymbolWrapper<S4> s4, SymbolWrapper<S5> s5, SymbolWrapper<S6> s6, SymbolWrapper<S7> s7, SymbolWrapper<S8> s8, SymbolWrapper<S9> s9, Func<S0, S1, S2, S3, S4, S5, S6, S7, S8, S9, T> func) => to.AddProduction(s0, s1, s2, s3, s4, s5, s6, s7, s8, s9).SetReduceFunction(func);

        public void CreateProduction<T, S0, S1, S2, S3, S4, S5, S6, S7, S8, S9, S10>(NonTerminalWrapper<T> to, SymbolWrapper<S0> s0, SymbolWrapper<S1> s1, SymbolWrapper<S2> s2, SymbolWrapper<S3> s3, SymbolWrapper<S4> s4, SymbolWrapper<S5> s5, SymbolWrapper<S6> s6, SymbolWrapper<S7> s7, SymbolWrapper<S8> s8, SymbolWrapper<S9> s9, SymbolWrapper<S10> s10, Func<S0, S1, S2, S3, S4, S5, S6, S7, S8, S9, S10, T> func) => to.AddProduction(s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10).SetReduceFunction(func);

        public void CreateProduction<T, S0, S1, S2, S3, S4, S5, S6, S7, S8, S9, S10, S11>(NonTerminalWrapper<T> to, SymbolWrapper<S0> s0, SymbolWrapper<S1> s1, SymbolWrapper<S2> s2, SymbolWrapper<S3> s3, SymbolWrapper<S4> s4, SymbolWrapper<S5> s5, SymbolWrapper<S6> s6, SymbolWrapper<S7> s7, SymbolWrapper<S8> s8, SymbolWrapper<S9> s9, SymbolWrapper<S10> s10, SymbolWrapper<S11> s11, Func<S0, S1, S2, S3, S4, S5, S6, S7, S8, S9, S10, S11, T> func) => to.AddProduction(s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11).SetReduceFunction(func);

        public void CreateProduction<T, S0, S1, S2, S3, S4, S5, S6, S7, S8, S9, S10, S11, S12>(NonTerminalWrapper<T> to, SymbolWrapper<S0> s0, SymbolWrapper<S1> s1, SymbolWrapper<S2> s2, SymbolWrapper<S3> s3, SymbolWrapper<S4> s4, SymbolWrapper<S5> s5, SymbolWrapper<S6> s6, SymbolWrapper<S7> s7, SymbolWrapper<S8> s8, SymbolWrapper<S9> s9, SymbolWrapper<S10> s10, SymbolWrapper<S11> s11, SymbolWrapper<S12> s12, Func<S0, S1, S2, S3, S4, S5, S6, S7, S8, S9, S10, S11, S12, T> func) => to.AddProduction(s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12).SetReduceFunction(func);

        public void CreateProduction<T, S0, S1, S2, S3, S4, S5, S6, S7, S8, S9, S10, S11, S12, S13>(NonTerminalWrapper<T> to, SymbolWrapper<S0> s0, SymbolWrapper<S1> s1, SymbolWrapper<S2> s2, SymbolWrapper<S3> s3, SymbolWrapper<S4> s4, SymbolWrapper<S5> s5, SymbolWrapper<S6> s6, SymbolWrapper<S7> s7, SymbolWrapper<S8> s8, SymbolWrapper<S9> s9, SymbolWrapper<S10> s10, SymbolWrapper<S11> s11, SymbolWrapper<S12> s12, SymbolWrapper<S13> s13, Func<S0, S1, S2, S3, S4, S5, S6, S7, S8, S9, S10, S11, S12, S13, T> func) => to.AddProduction(s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13).SetReduceFunction(func);

        public void CreateProduction<T, S0, S1, S2, S3, S4, S5, S6, S7, S8, S9, S10, S11, S12, S13, S14>(NonTerminalWrapper<T> to, SymbolWrapper<S0> s0, SymbolWrapper<S1> s1, SymbolWrapper<S2> s2, SymbolWrapper<S3> s3, SymbolWrapper<S4> s4, SymbolWrapper<S5> s5, SymbolWrapper<S6> s6, SymbolWrapper<S7> s7, SymbolWrapper<S8> s8, SymbolWrapper<S9> s9, SymbolWrapper<S10> s10, SymbolWrapper<S11> s11, SymbolWrapper<S12> s12, SymbolWrapper<S13> s13, SymbolWrapper<S14> s14, Func<S0, S1, S2, S3, S4, S5, S6, S7, S8, S9, S10, S11, S12, S13, S14, T> func) => to.AddProduction(s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14).SetReduceFunction(func);

        public ParserWrapper<T> CreateParser<T>() => new ParserWrapper<T>(Configurator.CreateParser());

        public abstract void Construct();


        public sealed class ParserWrapper<T>
        {
            public IParser<object> Parser { get; }


            internal ParserWrapper(IParser<object> parser) => Parser = parser;

            public T Parse(string s) => (T)Parser.Parse(s);
        }
    }

    public interface ITerminalWrapper
    {
        ITerminal<object> Symbol { get; }
    }

    public class SymbolWrapper<T>
    {
        public ISymbol<object> Symbol { get; }
        public Type SymbolType => typeof(T);


        public SymbolWrapper(ISymbol<object> symbol) => Symbol = symbol;
    }

    public sealed class TerminalWrapper<T>
        : SymbolWrapper<T>
    {
        public TerminalWrapper(ISymbol<object> symbol)
            : base(symbol)
        {
        }
    }

    public sealed class NonTerminalWrapper<T>
        : SymbolWrapper<T>
        , ITerminalWrapper
    {
        ITerminal<object> ITerminalWrapper.Symbol => (ITerminal<object>)Symbol;

        public NonTerminalWrapper(ISymbol<object> symbol)
            : base(symbol)
        {
        }

        public ProductionWrapper<T> AddProduction() => new ProductionWrapper<T>(((INonTerminal<object>)Symbol).AddProduction());

        public ProductionWrapper<T0, T> AddProduction<T0>(SymbolWrapper<T0> sym0) =>
            new ProductionWrapper<T0, T>(((INonTerminal<object>)Symbol).AddProduction(sym0.Symbol));

        public ProductionWrapper<T0, T1, T> AddProduction<T0, T1>(SymbolWrapper<T0> sym0, SymbolWrapper<T1> sym1) =>
            new ProductionWrapper<T0, T1, T>(((INonTerminal<object>)Symbol).AddProduction(sym0.Symbol, sym1.Symbol));

        public ProductionWrapper<T0, T1, T2, T> AddProduction<T0, T1, T2>(SymbolWrapper<T0> sym0, SymbolWrapper<T1> sym1, SymbolWrapper<T2> sym2) =>
            new ProductionWrapper<T0, T1, T2, T>(((INonTerminal<object>)Symbol).AddProduction(sym0.Symbol, sym1.Symbol, sym2.Symbol));

        public ProductionWrapper<T0, T1, T2, T3, T> AddProduction<T0, T1, T2, T3>(SymbolWrapper<T0> sym0, SymbolWrapper<T1> sym1, SymbolWrapper<T2> sym2, SymbolWrapper<T3> sym3) =>
            new ProductionWrapper<T0, T1, T2, T3, T>(((INonTerminal<object>)Symbol).AddProduction(sym0.Symbol, sym1.Symbol, sym2.Symbol, sym3.Symbol));

        public ProductionWrapper<T0, T1, T2, T3, T4, T> AddProduction<T0, T1, T2, T3, T4>(SymbolWrapper<T0> sym0, SymbolWrapper<T1> sym1, SymbolWrapper<T2> sym2, SymbolWrapper<T3> sym3, SymbolWrapper<T4> sym4) =>
            new ProductionWrapper<T0, T1, T2, T3, T4, T>(((INonTerminal<object>)Symbol).AddProduction(sym0.Symbol, sym1.Symbol, sym2.Symbol, sym3.Symbol, sym4.Symbol));

        public ProductionWrapper<T0, T1, T2, T3, T4, T5, T> AddProduction<T0, T1, T2, T3, T4, T5>(SymbolWrapper<T0> sym0, SymbolWrapper<T1> sym1, SymbolWrapper<T2> sym2, SymbolWrapper<T3> sym3, SymbolWrapper<T4> sym4, SymbolWrapper<T5> sym5) =>
            new ProductionWrapper<T0, T1, T2, T3, T4, T5, T>(((INonTerminal<object>)Symbol).AddProduction(sym0.Symbol, sym1.Symbol, sym2.Symbol, sym3.Symbol, sym4.Symbol, sym5.Symbol));

        public ProductionWrapper<T0, T1, T2, T3, T4, T5, T6, T> AddProduction<T0, T1, T2, T3, T4, T5, T6>(SymbolWrapper<T0> sym0, SymbolWrapper<T1> sym1, SymbolWrapper<T2> sym2, SymbolWrapper<T3> sym3, SymbolWrapper<T4> sym4, SymbolWrapper<T5> sym5, SymbolWrapper<T6> sym6) =>
            new ProductionWrapper<T0, T1, T2, T3, T4, T5, T6, T>(((INonTerminal<object>)Symbol).AddProduction(sym0.Symbol, sym1.Symbol, sym2.Symbol, sym3.Symbol, sym4.Symbol, sym5.Symbol, sym6.Symbol));

        public ProductionWrapper<T0, T1, T2, T3, T4, T5, T6, T7, T> AddProduction<T0, T1, T2, T3, T4, T5, T6, T7>(SymbolWrapper<T0> sym0, SymbolWrapper<T1> sym1, SymbolWrapper<T2> sym2, SymbolWrapper<T3> sym3, SymbolWrapper<T4> sym4, SymbolWrapper<T5> sym5, SymbolWrapper<T6> sym6, SymbolWrapper<T7> sym7) =>
            new ProductionWrapper<T0, T1, T2, T3, T4, T5, T6, T7, T>(((INonTerminal<object>)Symbol).AddProduction(sym0.Symbol, sym1.Symbol, sym2.Symbol, sym3.Symbol, sym4.Symbol, sym5.Symbol, sym6.Symbol, sym7.Symbol));

        public ProductionWrapper<T0, T1, T2, T3, T4, T5, T6, T7, T8, T> AddProduction<T0, T1, T2, T3, T4, T5, T6, T7, T8>(SymbolWrapper<T0> sym0, SymbolWrapper<T1> sym1, SymbolWrapper<T2> sym2, SymbolWrapper<T3> sym3, SymbolWrapper<T4> sym4, SymbolWrapper<T5> sym5, SymbolWrapper<T6> sym6, SymbolWrapper<T7> sym7, SymbolWrapper<T8> sym8) =>
            new ProductionWrapper<T0, T1, T2, T3, T4, T5, T6, T7, T8, T>(((INonTerminal<object>)Symbol).AddProduction(sym0.Symbol, sym1.Symbol, sym2.Symbol, sym3.Symbol, sym4.Symbol, sym5.Symbol, sym6.Symbol, sym7.Symbol, sym8.Symbol));

        public ProductionWrapper<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T> AddProduction<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(SymbolWrapper<T0> sym0, SymbolWrapper<T1> sym1, SymbolWrapper<T2> sym2, SymbolWrapper<T3> sym3, SymbolWrapper<T4> sym4, SymbolWrapper<T5> sym5, SymbolWrapper<T6> sym6, SymbolWrapper<T7> sym7, SymbolWrapper<T8> sym8, SymbolWrapper<T9> sym9) =>
            new ProductionWrapper<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T>(((INonTerminal<object>)Symbol).AddProduction(sym0.Symbol, sym1.Symbol, sym2.Symbol, sym3.Symbol, sym4.Symbol, sym5.Symbol, sym6.Symbol, sym7.Symbol, sym8.Symbol, sym9.Symbol));

        public ProductionWrapper<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T> AddProduction<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(SymbolWrapper<T0> sym0, SymbolWrapper<T1> sym1, SymbolWrapper<T2> sym2, SymbolWrapper<T3> sym3, SymbolWrapper<T4> sym4, SymbolWrapper<T5> sym5, SymbolWrapper<T6> sym6, SymbolWrapper<T7> sym7, SymbolWrapper<T8> sym8, SymbolWrapper<T9> sym9, SymbolWrapper<T10> sym10) =>
            new ProductionWrapper<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T>(((INonTerminal<object>)Symbol).AddProduction(sym0.Symbol, sym1.Symbol, sym2.Symbol, sym3.Symbol, sym4.Symbol, sym5.Symbol, sym6.Symbol, sym7.Symbol, sym8.Symbol, sym9.Symbol, sym10.Symbol));

        public ProductionWrapper<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T> AddProduction<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(SymbolWrapper<T0> sym0, SymbolWrapper<T1> sym1, SymbolWrapper<T2> sym2, SymbolWrapper<T3> sym3, SymbolWrapper<T4> sym4, SymbolWrapper<T5> sym5, SymbolWrapper<T6> sym6, SymbolWrapper<T7> sym7, SymbolWrapper<T8> sym8, SymbolWrapper<T9> sym9, SymbolWrapper<T10> sym10, SymbolWrapper<T11> sym11) =>
            new ProductionWrapper<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T>(((INonTerminal<object>)Symbol).AddProduction(sym0.Symbol, sym1.Symbol, sym2.Symbol, sym3.Symbol, sym4.Symbol, sym5.Symbol, sym6.Symbol, sym7.Symbol, sym8.Symbol, sym9.Symbol, sym10.Symbol, sym11.Symbol));

        public ProductionWrapper<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T> AddProduction<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(SymbolWrapper<T0> sym0, SymbolWrapper<T1> sym1, SymbolWrapper<T2> sym2, SymbolWrapper<T3> sym3, SymbolWrapper<T4> sym4, SymbolWrapper<T5> sym5, SymbolWrapper<T6> sym6, SymbolWrapper<T7> sym7, SymbolWrapper<T8> sym8, SymbolWrapper<T9> sym9, SymbolWrapper<T10> sym10, SymbolWrapper<T11> sym11, SymbolWrapper<T12> sym12) =>
            new ProductionWrapper<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T>(((INonTerminal<object>)Symbol).AddProduction(sym0.Symbol, sym1.Symbol, sym2.Symbol, sym3.Symbol, sym4.Symbol, sym5.Symbol, sym6.Symbol, sym7.Symbol, sym8.Symbol, sym9.Symbol, sym10.Symbol, sym11.Symbol, sym12.Symbol));

        public ProductionWrapper<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T> AddProduction<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(SymbolWrapper<T0> sym0, SymbolWrapper<T1> sym1, SymbolWrapper<T2> sym2, SymbolWrapper<T3> sym3, SymbolWrapper<T4> sym4, SymbolWrapper<T5> sym5, SymbolWrapper<T6> sym6, SymbolWrapper<T7> sym7, SymbolWrapper<T8> sym8, SymbolWrapper<T9> sym9, SymbolWrapper<T10> sym10, SymbolWrapper<T11> sym11, SymbolWrapper<T12> sym12, SymbolWrapper<T13> sym13) =>
            new ProductionWrapper<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T>(((INonTerminal<object>)Symbol).AddProduction(sym0.Symbol, sym1.Symbol, sym2.Symbol, sym3.Symbol, sym4.Symbol, sym5.Symbol, sym6.Symbol, sym7.Symbol, sym8.Symbol, sym9.Symbol, sym10.Symbol, sym11.Symbol, sym12.Symbol, sym13.Symbol));

        public ProductionWrapper<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T> AddProduction<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(SymbolWrapper<T0> sym0, SymbolWrapper<T1> sym1, SymbolWrapper<T2> sym2, SymbolWrapper<T3> sym3, SymbolWrapper<T4> sym4, SymbolWrapper<T5> sym5, SymbolWrapper<T6> sym6, SymbolWrapper<T7> sym7, SymbolWrapper<T8> sym8, SymbolWrapper<T9> sym9, SymbolWrapper<T10> sym10, SymbolWrapper<T11> sym11, SymbolWrapper<T12> sym12, SymbolWrapper<T13> sym13, SymbolWrapper<T14> sym14) =>
            new ProductionWrapper<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T>(((INonTerminal<object>)Symbol).AddProduction(sym0.Symbol, sym1.Symbol, sym2.Symbol, sym3.Symbol, sym4.Symbol, sym5.Symbol, sym6.Symbol, sym7.Symbol, sym8.Symbol, sym9.Symbol, sym10.Symbol, sym11.Symbol, sym12.Symbol, sym13.Symbol, sym14.Symbol));
    }

    public abstract class ProductionWrapperBase
    {
        public IProduction<object> Production { get; }


        public ProductionWrapperBase(IProduction<object> production) => Production = production;

        public void SetReduceToFirst() => Production.SetReduceToFirst();

        public void SetPrecedence(IPrecedenceGroup precedence) => Production.SetPrecedence(precedence);
    }

    public sealed class ProductionWrapper<R>
        : ProductionWrapperBase
    {
        public void SetReduceFunction(Func<R> f) => Production.SetReduceFunction(o => f());

        public ProductionWrapper(IProduction<object> production)
            : base(production)
        {
        }
    }

    public sealed class ProductionWrapper<T0, R>
        : ProductionWrapperBase
    {
        public void SetReduceFunction(Func<T0, R> f) => Production.SetReduceFunction(o => f((T0)o[0]));

        public ProductionWrapper(IProduction<object> production)
            : base(production)
        {
        }
    }

    public sealed class ProductionWrapper<T0, T1, R>
        : ProductionWrapperBase
    {
        public void SetReduceFunction(Func<T0, T1, R> f) => Production.SetReduceFunction(o => f((T0)o[0], (T1)o[1]));

        public ProductionWrapper(IProduction<object> production)
            : base(production)
        {
        }
    }

    public sealed class ProductionWrapper<T0, T1, T2, R>
        : ProductionWrapperBase
    {
        public void SetReduceFunction(Func<T0, T1, T2, R> f) => Production.SetReduceFunction(o => f((T0)o[0], (T1)o[1], (T2)o[2]));

        public ProductionWrapper(IProduction<object> production)
            : base(production)
        {
        }
    }

    public sealed class ProductionWrapper<T0, T1, T2, T3, R>
        : ProductionWrapperBase
    {
        public void SetReduceFunction(Func<T0, T1, T2, T3, R> f) => Production.SetReduceFunction(o => f((T0)o[0], (T1)o[1], (T2)o[2], (T3)o[3]));

        public ProductionWrapper(IProduction<object> production)
            : base(production)
        {
        }
    }

    public sealed class ProductionWrapper<T0, T1, T2, T3, T4, R>
        : ProductionWrapperBase
    {
        public void SetReduceFunction(Func<T0, T1, T2, T3, T4, R> f) => Production.SetReduceFunction(o => f((T0)o[0], (T1)o[1], (T2)o[2], (T3)o[3], (T4)o[4]));

        public ProductionWrapper(IProduction<object> production)
            : base(production)
        {
        }
    }

    public sealed class ProductionWrapper<T0, T1, T2, T3, T4, T5, R>
        : ProductionWrapperBase
    {
        public void SetReduceFunction(Func<T0, T1, T2, T3, T4, T5, R> f) => Production.SetReduceFunction(o => f((T0)o[0], (T1)o[1], (T2)o[2], (T3)o[3], (T4)o[4], (T5)o[5]));

        public ProductionWrapper(IProduction<object> production)
            : base(production)
        {
        }
    }

    public sealed class ProductionWrapper<T0, T1, T2, T3, T4, T5, T6, R>
        : ProductionWrapperBase
    {
        public void SetReduceFunction(Func<T0, T1, T2, T3, T4, T5, T6, R> f) => Production.SetReduceFunction(o => f((T0)o[0], (T1)o[1], (T2)o[2], (T3)o[3], (T4)o[4], (T5)o[5], (T6)o[6]));

        public ProductionWrapper(IProduction<object> production)
            : base(production)
        {
        }
    }

    public sealed class ProductionWrapper<T0, T1, T2, T3, T4, T5, T6, T7, R>
        : ProductionWrapperBase
    {
        public void SetReduceFunction(Func<T0, T1, T2, T3, T4, T5, T6, T7, R> f) => Production.SetReduceFunction(o => f((T0)o[0], (T1)o[1], (T2)o[2], (T3)o[3], (T4)o[4], (T5)o[5], (T6)o[6], (T7)o[7]));

        public ProductionWrapper(IProduction<object> production)
            : base(production)
        {
        }
    }

    public sealed class ProductionWrapper<T0, T1, T2, T3, T4, T5, T6, T7, T8, R>
        : ProductionWrapperBase
    {
        public void SetReduceFunction(Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, R> f) => Production.SetReduceFunction(o => f((T0)o[0], (T1)o[1], (T2)o[2], (T3)o[3], (T4)o[4], (T5)o[5], (T6)o[6], (T7)o[7], (T8)o[8]));

        public ProductionWrapper(IProduction<object> production)
            : base(production)
        {
        }
    }

    public sealed class ProductionWrapper<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, R>
        : ProductionWrapperBase
    {
        public void SetReduceFunction(Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, R> f) => Production.SetReduceFunction(o => f((T0)o[0], (T1)o[1], (T2)o[2], (T3)o[3], (T4)o[4], (T5)o[5], (T6)o[6], (T7)o[7], (T8)o[8], (T9)o[9]));

        public ProductionWrapper(IProduction<object> production)
            : base(production)
        {
        }
    }

    public sealed class ProductionWrapper<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, R>
        : ProductionWrapperBase
    {
        public void SetReduceFunction(Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, R> f) => Production.SetReduceFunction(o => f((T0)o[0], (T1)o[1], (T2)o[2], (T3)o[3], (T4)o[4], (T5)o[5], (T6)o[6], (T7)o[7], (T8)o[8], (T9)o[9], (T10)o[10]));

        public ProductionWrapper(IProduction<object> production)
            : base(production)
        {
        }
    }

    public sealed class ProductionWrapper<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, R>
        : ProductionWrapperBase
    {
        public void SetReduceFunction(Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, R> f) => Production.SetReduceFunction(o => f((T0)o[0], (T1)o[1], (T2)o[2], (T3)o[3], (T4)o[4], (T5)o[5], (T6)o[6], (T7)o[7], (T8)o[8], (T9)o[9], (T10)o[10], (T11)o[11]));

        public ProductionWrapper(IProduction<object> production)
            : base(production)
        {
        }
    }

    public sealed class ProductionWrapper<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, R>
        : ProductionWrapperBase
    {
        public void SetReduceFunction(Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, R> f) => Production.SetReduceFunction(o => f((T0)o[0], (T1)o[1], (T2)o[2], (T3)o[3], (T4)o[4], (T5)o[5], (T6)o[6], (T7)o[7], (T8)o[8], (T9)o[9], (T10)o[10], (T11)o[11], (T12)o[12]));

        public ProductionWrapper(IProduction<object> production)
            : base(production)
        {
        }
    }

    public sealed class ProductionWrapper<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, R>
        : ProductionWrapperBase
    {
        public void SetReduceFunction(Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, R> f) => Production.SetReduceFunction(o => f((T0)o[0], (T1)o[1], (T2)o[2], (T3)o[3], (T4)o[4], (T5)o[5], (T6)o[6], (T7)o[7], (T8)o[8], (T9)o[9], (T10)o[10], (T11)o[11], (T12)o[12], (T13)o[13]));

        public ProductionWrapper(IProduction<object> production)
            : base(production)
        {
        }
    }

    public sealed class ProductionWrapper<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, R>
        : ProductionWrapperBase
    {
        public void SetReduceFunction(Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, R> f) => Production.SetReduceFunction(o => f((T0)o[0], (T1)o[1], (T2)o[2], (T3)o[3], (T4)o[4], (T5)o[5], (T6)o[6], (T7)o[7], (T8)o[8], (T9)o[9], (T10)o[10], (T11)o[11], (T12)o[12], (T13)o[13], (T14)o[14]));

        public ProductionWrapper(IProduction<object> production)
            : base(production)
        {
        }
    }
}
